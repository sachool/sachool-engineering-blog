<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: オブジェクト指向 | Sachool Engineering Blog]]></title>
  <link href="https://sachool.jp/blog/entry/categories/obujekuto-shiko/atom.xml" rel="self"/>
  <link href="https://sachool.jp/blog/"/>
  <updated>2017-04-12T18:56:15+09:00</updated>
  <id>https://sachool.jp/blog/</id>
  <author>
    <name><![CDATA[Sackle]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[オブジェクト指向とは]]></title>
    <link href="https://sachool.jp/blog/entry/2016/05/02/object-learning/"/>
    <updated>2016-05-02T18:47:21+09:00</updated>
    <id>https://sachool.jp/blog/entry/2016/05/02/object-learning</id>
    <content type="html"><![CDATA[<p>k&#95;yoshidaです。オブジェクト指向の学習を研修で行ったのでまとめてみました。</p>

<p><strong><em>オブジェクト指向とはどのような事か</em></strong></p>

<!-- more -->


<p>オブジェクトというのは物, 物に重点をおいた考え方で物事を整理し,ロジックを作っていく考え方です。
物視点なのでオブジェクト同士がメッセージングを行いメッセージを受け取ると内容を解釈し実行,処理を行うフローです。
オブジェクト指向言語と呼ばれるプログラミング言語にはクラスという概念がある,
クラスというのはフィールド,メッソドなどを一括りにしたオブジェクトの事です。</p>

<p><img src="/images/class_on.png" width="150" alt="クラスの構成" /></p>

<p>オブジェクトがメッセージを受け取った時メソッドが呼びだされて処理の実行がされます。</p>

<p>クラスを実行するとインスタンスが生成されます。実行データなどの集合したオブジェクトです。</p>

<p><img src="/images/class_instance.png" width="300" alt="クラスとインスタンス" /></p>

<p>フィールドにはクラスの属性,データが入っていて,メソッドは処理などが入っている関数です。</p>

<p>システムになるとクラスがたくさん集まっていて関係を持つクラスに紐付いて処理が実行する</p>

<hr />

<p>オブジェクト指向言語には主に３つの考え方があります。</p>

<ol>
<li>継承</li>
<li>ポリモーフィズム</li>
<li>カプセル化</li>
</ol>


<h2>継承</h2>

<p>オブジェクト指向では継承という機能があります。
クラスを継承するとき,継承する側を子クラス,される側を親クラス この関係を親子関係といい,親子関係を持つ子クラスは親クラスの機能を継承し,使用することが出来るようになります。</p>

<p><img src="/images/Aclass_Bclass.png" width="300" alt="継承" /></p>

<h2>ポリモーフィズム</h2>

<p>親クラスから子クラスに継承を行うと前記のように機能が継承する、その継承された機能を使うかどうか設定したり,新しく機能をプログラミングしオーバーライドさせたりする事をポリモーフィズムといい、システムの変更に柔軟に対応する事が出来る。またオブジェクトが多様性をもつ</p>

<h2>カプセル化</h2>

<p>複雑な処理を含んだオブジェクトを簡単に表現するのにカプセル化という機能がある。カプセル化を行うと抽象化することができ,機能の全体像を知らなくても操作さえ知っていれば扱えるようになる。また簡単になったことで,メンテナンス性の向上を見込めるようになる。他のメッソドから変更させたくないデータ,処理内容を隠蔽することができてより安全なプログラミングを行えるように出来る。</p>

<h2>オブジェクト指向のメリット・デメリット</h2>

<ol>
<li>メリット

<ol>
<li>コードの再利用が他の言語よりも容易なので,大規模開発や複数人での開発で向いている事</li>
<li>ライブラリ開発に向いている</li>
</ol>
</li>
<li>デメリット

<ol>
<li>学習コストが大きい</li>
<li>設計の段階で,変更しない部分変更があるであろう部分を決めておかないと帰って工数が増大してしまう</li>
</ol>
</li>
</ol>


<h3>まとめ</h3>

<p>オブジェクト指向を学習することで,なぜ多くの場面でオブジェクト指向が使われるのかを理解出来るようなってきました。
大規模開発やチーム開発においてオブジェクト指向を用いることで無駄をなくせる,といったことが出来きます。</p>

<p>オブジェクト指向の考え方はここに記述した事はごく一部です。オブジェクト指向をマスターするためにはまだまだ勉強不足です。思考通りコードを書くことはもっと難しい事なのでコードを描きながら学習していきたいと思います。</p>
]]></content>
  </entry>
  
</feed>
