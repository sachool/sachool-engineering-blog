<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: work | Sachool Engineering Blog]]></title>
  <link href="https://sachool.jp/blog/entry/categories/work/atom.xml" rel="self"/>
  <link href="https://sachool.jp/blog/"/>
  <updated>2017-04-12T19:21:53+09:00</updated>
  <id>https://sachool.jp/blog/</id>
  <author>
    <name><![CDATA[Sackle]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[先輩に頼り完成出来た初プロジェクト]]></title>
    <link href="https://sachool.jp/blog/entry/2017/02/22/new-first-project/"/>
    <updated>2017-02-22T15:10:26+09:00</updated>
    <id>https://sachool.jp/blog/entry/2017/02/22/new-first-project</id>
    <content type="html"><![CDATA[<p>初めまして、新人エンジニアのTKです。<br/>
入社して3ヶ月後に、新規プロジェクトに参加しました。<br/>
今回は、その時の事について記述していきたいと思います。</p>

<!-- more -->


<h2>既存サイトを作り直した</h2>

<p>参加した初プロジェクトは、既存動いているサイトに機能を追加し、お客様に提供する仕事でした。
Ruby on Rails４を使い作る為、まずrailsの勉強から始めました。</p>

<h3>作成した機能</h3>

<ul>
<li>会員登録処理を作った</li>
<li>ユーザー画面の修正</li>
<li>チャット機能に機能追加</li>
<li>パスワード忘れ機能の修正</li>
</ul>


<h3>会員登録処理を作った</h3>

<p>会員登録画面を作ろうと思い要件を聞いた結果、フォームにはform_forやform_tagがあり、既存のページはform_forで作られていたが、form_tagで作る必要があり、form_tagに変える作業でつまずきました。
また、deviseで会員登録を行っており要件には、複数テーブにデータを保存する必要があり保存作業でつまずき大変でした。</p>

<p>会員編集画面も作りました。
編集画面は会員登録とあまり変わらなかったのですが、画面をタブで切り分ける事が必要で大変でした。</p>

<p>会員登録画面を完成させるまでに遅れが発生し先輩にフォローして貰いながら、残業でキャッチアップしていたのですが間に合わず、先輩にログイン機能を担当して頂いた為間に合いました。</p>

<h3>ユーザー画面の修正</h3>

<p>既存のサイトにタイトルの変更、ボタンの追加、pdfの出力等を行いました。
実装は簡単に終わったので良かっです。</p>

<h3>チャット機能に機能追加</h3>

<p>既存で動いているチャット機能にボタンが押されたらタイトル作成無しでチャット出来る機能を追加しました。
既存の処理がありそれに追加するので、処理を理解するのに時間がかかりました。
遅れが発生しましたが残業で間に合わせました。</p>

<h3>パスワード忘れ機能の修正</h3>

<p>既存の処理は、userのemailで送信するのだが、別テーブルのemailで送信するのが、用件だったので、別テーブルのemailを取得し送信させるのに時間がかかった。
　</p>

<h2>動作確認</h2>

<p>全ての機能を完成後、テストケースを作成し動作確認とテストを行いました。</p>

<p>テストを行ったところ、バリデーションを追加されていなかった。
また、表示項目が間違っていたなど、修正するのに時間がかかったため大変でした。</p>

<h2>まとめ</h2>

<p>新規プロジェクトに参加し既存動いているサイトに機能追加を行いましたが、先輩に質問し過ぎていたので迷惑をかけてしまいました。
これからは、もっと自分で調べる癖をつけたいと考えています。
また、もっといいプログラムが書けるよう勉強して行きたいとも考えています。</p>

<p>次のプロジェクトも頑張って参加して行きたいと考えています</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bulletin_Board_with_Java]]></title>
    <link href="https://sachool.jp/blog/entry/2016/07/22/bulletin-board-with-java/"/>
    <updated>2016-07-22T11:15:35+09:00</updated>
    <id>https://sachool.jp/blog/entry/2016/07/22/bulletin-board-with-java</id>
    <content type="html"><![CDATA[<h1>javaを使って掲示板作成</h1>

<p>どうも。新人エンジニアのhondaです。</p>

<p>今回は、java servletを使って掲示板を作成する課題に取り組んだので投稿します。</p>

<p>＊以下の内容はサーバサイドjavaのプログラムがどう動いているかを、全体的な視点で見たものを記述しています。理解があやふやなところはできるだけ調べて書いていますが、間違っている記述もあるかもしれません。参考程度に読んでいただければ幸いです。
また間違いなど、よろしればご指摘ください。</p>

<!-- more -->


<h2>はじめてのservlet</h2>

<p>java servletというjavaの機能を使ってwebアプリを作りました。</p>

<p>javaのプログラムは1ヶ月ほど学んできましたが、webはいろいろと分からないことが多く苦労したのでその辺を書いていこうと思います。</p>

<p>servletとはjavaでwebサービスを作るための、javaで書かれたプログラムで、webに必要なhttp通信等の機能を実装したクラス（？）の集合（パッケージ？）であると理解しています。</p>

<p>なので普通のjavaのプログラムにimportして使います。</p>

<p>そしてインポートするべきservlet-apiはjdkには入って無いのでダウンロードする必要があります。</p>

<p>tomcatというservletを動かすserverをインストールすればその中にservlet-api.jarというファイルがあるのでここにクラスパスを通します（環境変数の設定）。これにクラスパスを通せばservlet をimportしたjavaをコンパイルできます。</p>

<p>importするとhttp requestとresponse を使ってクライアントと情報のやり取りをすることができるようになります。</p>

<p>こんな感じで、servletを使える環境をつくりました。</p>

<h2>tomcatのファイル配置</h2>

<p>その後、理解に苦しんだのがtomcatにファイルをどう配置すればいいのかという点です。</p>

<p>いろいろと調べまわった結果、以下のようにファイルを配置すればいいことが分かりました。</p>

<p>まずtomcat内のwebapps下にプロジェクトのディレクトリを配置します。
（webapps/bulletinBoard みたいな感じ）</p>

<p>続いて、bulletinBoardの中にWEB-INFというディレクトリを作ります。
（bulletinBoard/WEB-INF）</p>

<p>そして、このWEB-INFの中にservletプログラムを配置します。</p>

<p>最後に、WEB-INF下にweb.xmlというファイルを作ります。ここにはservletにアクセスするためのurl等が記録されています。</p>

<p>基本的にはこの構成でサーブレットを動かします。</p>

<p>servletを継承したjavaクラスファイルをWEB-INF下に置き、web.xmlに記述したurlでブラウザからアクセスします。</p>

<p>たとえば、web.xmlにlogin というURLとLoginServlet.javaというservletファイルの関連を記述しておけば、webからはlocalhost:8080/bulletinBoard/loginといったURLでservletファイルにアクセスできます。</p>

<p>WEB-INF下のファイルにはブラウザからは直接アクセスできないので、web.xmlに記載のurlにアクセスしてもらって、そのURLとweb.xmlを元にサーバーはservletを探し出して、クライアントにサービスを提供します。</p>

<h2>servletでMVCモデルを構築</h2>

<p>servletでwebアプリを作るときは、</p>

<ul>
<li><p>servlet →　コントローラー（クライアントからリクエストを受け付けて、必要な処理をモデルに指示して、情報をビューに返す）</p></li>
<li><p>java Beans （あるいは普通のjavaクラス？） →　モデル（コントローラーから指示を受けて情報を処理。DB通信もこのクラスで行う）</p></li>
<li><p>jsp →　ビュー（コントローラーから受け取った情報をhtmlとして表示）</p></li>
</ul>


<p>という役割分担でクラス設計をします。</p>

<p>jspとはhtmlにjavaのコードを埋め込むようにして使えるようにしたプログラムのことです。htmlにjavaコードが入っているので、servletからもらったDBの情報などをjavaからテキストとして出力し、ブラウザはそのテキストを読み込みます。ということなので、テキスト出力はHTMLの文法にのっとって書きます。
（実際はjspもservletを継承したクラスで、servletがout.println()とかやってテキスト（HTML）を出力するのを、うまいこと書きやすいように変換してるプログラム？みたいです。なので、jspを読み込む際は、jspをjavaプログラムに変換 → コンパイル → 実行 → HTMLのテキストが出力される → ブラウザはこれを読む という感じになっているのだと思います。）</p>

<p>その一方、java Beans　はモデルとしてビジネスロジックを担当します(とwikipediaには書いてあります)。java Beansとはプロパティとそれに対するgetter, setterを持った普通のjavaクラスです。このプロパティに、たとえばDBからとってきたデータをセットして、コントローラー → ビューに渡して表示をします。ということなので、java Beans自体は情報だけ保持して処理を持たないので、DB接続等の処理は普通のjavaクラスに持たせます。</p>

<p>そして、servletはクライアントからのリクエストを受け付けて、内容によって処理を分岐させてモデルに処理を指示して、処理した情報を受け取ります。その後、表示すべきjspを選択しクライアントに表示します。クライアントがjsp(HTMl)を参照して再びリクエストを送ってくるとサーブレットがこれに対応します。</p>

<p>（というわけなので、基本的にjspファイル（ビュー）もサーブレット経由で表示するので、ブラウザから直接は見えないWEB-INF下に配置します。いちおうWEB-INF外に置いてブラウザから直接アクセスしてもらうこともできます。</p>

<p>そして、気をつける点として、WEB-INF下にCSSやJSファイルを置くと、ブラウザから参照できないのでフロントに反映されません。これは、jspファイルにアクセスするとjavaプログラムの出力としてHTMLが表示され、ブラウザはこれを読み込んだ後にHTMLに記載のlinkをたどってcss,JSを読みに行こうとするからです。つまりservletの指示で読み込みに行っているわけではないので、WEB-INF下は参照できない、と理解しています。）</p>

<h2>掲示板の作成</h2>

<p>以上の感じでサーバサイドjavaを理解しつつ、掲示板を作成しました。</p>

<p>今回は</p>

<ul>
<li>apache-tomcat-8.0.36</li>
<li>mysql 15.1</li>
<li>IDEはeclipse</li>
</ul>


<p>で作成しました。</p>

<p>成果物は会員制の掲示板で以下の機能があります。</p>

<ul>
<li>会員制でユーザー名とパスワードで認証</li>
<li>カテゴリー→スレッド→コメントという階層状に情報を保存</li>
<li>画像のアップロードできる</li>
<li>会員別に投稿情報を管理し、自分の投稿のみを削除できる</li>
</ul>


<p>大雑把にはこんな感じです。</p>

<p>いちおうクラス図だけアップしておきます。</p>

<p><img src="/images/0295_honda.jpg" alt="掲示板クラス図" /></p>

<p>掲示板作成後に知ったのですが、DB接続はそれぞれの処理（SELECT、UPDATE、INSERT、DELETEなど）ごとに分けるべきらしいです。また、各サーブレットごとにセッションクラス（？）を用意して、処理を記述する方法もあるらしいです。</p>

<h2>課題を終えて</h2>

<p>ひとつのwebアプリケーションを作ってみることで、全体像が理解できて大変勉強になりました。</p>

<p>webアプリひとつ作るだけで、HTML,CSS,Javascript,サーバサイド言語の4つのスキルを身につけなければならず、求められるものが多いなと感じました。</p>

<p>また、webの技術はブラックボックスが多いなと感じました。たとえば、httpリクエストを送るときにはどんなプログラムが動いているのかなどを考えなくても、getとpostで送信するんだと理解しておけばコードは書けます。</p>

<p>ただ、その裏側まで理解した上でプログラムを作っていくことが重要だと思いました。それが本質を理解してコードを書くということだと思います。</p>

<p>総じて、webの技術の奥の深さが分かった課題でした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[もうすぐ3ヶ月。。]]></title>
    <link href="https://sachool.jp/blog/entry/2016/06/15/kadai/"/>
    <updated>2016-06-15T20:58:12+09:00</updated>
    <id>https://sachool.jp/blog/entry/2016/06/15/kadai</id>
    <content type="html"><![CDATA[<p>こんにちは。東京オフィスのイッセイです。<br/>
ユーロが始まりましたが、僕の推し国は開催国のフランスです。</p>

<p>今回は、もう少しで入社して3ヶ月になるという事で現在の課題の振り返りと日々感じる事を書いていきたいと思います。</p>

<!--more-->


<h3>アルゴリズムを考えた！</h3>

<p>このブログでも書きましたが、入社して電卓アルゴリズムの作成から始まりました。
アルゴリズムができたら、それが正しく出来ているのか実際のコードで書いてみて検証をしていきました。ここで初めて、コードを書くようになったのですが(C++)ここで自分が作成したアルゴリズムが間違っている事に気付く訳ですね。
作成したアルゴリズムどおりに作成するとそれはそれは書けたもんじゃ有りませんでした。
コードを書いて初めて分かる事もありました。</p>

<p>アルゴリズム作成　→　検証　→　アルゴリズム修正　</p>

<p>こんな流れでの課題を、ソートと検索アルゴリズムにおいても行いました。</p>

<p>結果から逆算して、一つ一つ論理的に組み立てることや、どうしたらもっと効率的に動かせるか、という事を捻り出さないといけないのですが、これが全然出来てなかったですね。</p>

<p>ただ、実際にコードを書いてそれが動いた時、<br/>
<em>本当に動いたー！</em>と思って結構嬉しかったですね。</p>

<p>アルゴリズムを考える作業は、エンジニアとしての基礎になると思いますし、とても大切な事だと思います。今になって痛感している事でもあります。</p>

<h2>クラス図とシーケンス図の作成</h2>

<p>アルゴリズムを考える課題が終わり、オブジェクト指向の学習に入りました。
これは設計側の考え方ですね。</p>

<p>オブジェクト指向やMVCは、システムの仕組みや構成を理解するものですが、この学習をしてから、自動販売機のクラス図を作成しました。</p>

<p>システムを、オブジェクトの相互作用で構築しようというのがオブジェクト指向ですが、<br/>
このインスタンス(オブジェクト)を生み出すのがクラスです。</p>

<p>複雑に絡み合っているイメージのあるシステムですが、それを図にして分かり易くあらわそうとしたのがクラス図です。<br/>
自動販売機のクラス図という事で、これまた相当の苦戦をしました。というより現在進行形です。。</p>

<p>今回は、皆さんのように詳細を書くというよりもかなりの修正を行ったのでパニックになりながら感じた事を簡単に書いていきたいと思います。</p>

<p>まず、クラス図を作成する上で大切な事は、それぞれのオブジェクトの役割を明確にする事。<br/>
その為には自動販売機のことをよく理解していなければなりません。<br/>
これは、アルゴリズムでも同じでした。<br/>
自動販売機で考えると、</p>

<ul>
<li>入金する</li>
<li>ボタンを押す</li>
<li>商品を取り出す</li>
<li>お釣りを取り出す</li>
</ul>


<p>こんな感じですかね。</p>

<p>これを基に作成を始めるわけですけどそもそも使用者目線ですし、基本的にオブジェクト指向の理解が曖昧だった為、この視覚的に見えているものに引っ張られて、内部構造を良く考えられてませんでした。<br/>
イベントに対して、何がどんな役割を持って動作するのかを全く考慮していません。</p>

<p>そこから、修正に修正を重ねるほど、自ら複雑にしていました、<br/>
とりあえずの継承みたいになっているクラスや、自動販売機にありそうな物体や仕組みに名前をつけただけのクラス図になっていました。</p>

<p>その後、シーケンス図を書いて処理の流れ、オブジェクトの役割を明確に理解しようという目的だったのですが、何がなんだか分からなくなり一人混乱している時間が長かったです。</p>

<p>まあそれも当然です。<br/>
そもそもの基礎概念の理解が出来ていないので、どこが間違っているのかも分かっていなかったからです。<br/>
原点に立ち返り、基礎的なところの復習を行い、再度整理をして作成を行ったのですが、気付けばクラス図の作成を始めて1ヶ月以上経っていました。</p>

<p>役割を明確にして、どうオブジェクトを抽出していくのか。<br/>
そしてそのオブジェクトはどう周りとやり取りをするのか。</p>

<p>1ヶ月経ってようやくまともに考えるようになり、それまで多くの時間を無駄にしてしまってと思います。<br/>
何をするにしても、基礎的な事への理解が大切で疎かにしてはいけないと痛感しております。この期間を、その勉強期間だったと無理やりポジティブに考えようと思っています。</p>

<h2>まとめ</h2>

<p>入社してもうすぐ3ヶ月になります。正直進捗的には遅れています。
論理的に考える力や、学習の仕方が人と比べて明らかに欠陥していると感じました。<br/>
結論を急いでしまったり、時間の経過と共に本質的なところから少しずつずれてしまっていたり。気付かないうちに様々な要因に流され、目的を見失っている事もあったんだと思います。<br/>
課題の目的は、これから先エンジニアとして闘うための準備であるのですが、課題の提出が目標になってしまっていたのでは、、と感じています。</p>

<p>課題が出来ると、少なからず達成感を味わいますし、喜びもあります。<br/>
しかしその先にある、もっと大きい達成感を味わう為、喜びや誇りを感じれるようになる為に、もっともっと、考え抜いて脳みそを鍛えていかないといけないなと、感じています。</p>

<p>改めてですが、テスト業務を通じて再度凄い仕事だなーと実感しました。<br/>
未経験からエンジニアを目指す方、決して大変な事ばかりではないすばらしい職業です。<br/>
考えて考えて考える事。粘り強く考える事から逃げなければ結果はついてくるはずです。頑張りましょう！！<br/>
(自戒の意)　　</p>

<p>そんな感じで、今回は終わりたいと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[インベーダーゲームを作りました]]></title>
    <link href="https://sachool.jp/blog/entry/2016/06/15/invader-game/"/>
    <updated>2016-06-15T16:38:49+09:00</updated>
    <id>https://sachool.jp/blog/entry/2016/06/15/invader-game</id>
    <content type="html"><![CDATA[<p>どうも。新人エンジニアのhondaです。
入社して早くも2ヶ月半が過ぎ、システム開発の全体像が少しずつ見え始めた感じです。</p>

<p><strong>「Invaderゲームのiphoneアプリをつくろう」</strong>という研修課題に取り組んだので、今日はその成果を報告します。</p>

<!--more-->


<h2>Space Invaders</h2>

<p>そもそもInvaderゲームってどんなだっけ？</p>

<p>というところから調べました。
もちろんInvaderがどんなゲームかはなんとなく知っていましたが、細かいルールなど知らない部分も多かったので、調べたところ</p>

<blockquote><p>「画面の中央やや上方に縦に5段、横に11列の計55のインベーダーが現れる。インベーダーはまとまって横移動をしながら、端にたどり着くたびに一段下がって再び逆方向に進
行する。これを繰り返すことによって、だんだんと下に降りてくる。インベーダーが画面
最下部のプレイヤーの位置まで降りてきたら占領されたことになり、残機があってもゲー
ムオーバーとなるために、それまでにインベーダーを全滅させなければならない。」
<a href="https://ja.wikipedia.org/wiki/%E3%82%B9%E3%83%9A%E3%83%BC%E3%82%B9%E3%82%A4%E3%83%B3%E3%83%99%E3%83%BC%E3%83%80%E3%83%BC#.E3.82.B2.E3.83.BC.E3.83.A0.E7.94.BB.E9.9D.A2.E3.81.A8.E3.82.B2.E3.83.BC.E3.83.A0.E5.86.85.E5.AE.B9">『wikipedia』</a></p></blockquote>

<p>とのこと。これを参考に作ることにしました。</p>

<h2>まず設計</h2>

<p>まずはインベーダーゲームのクラス図を作成することから始めました。</p>

<p>結果的に下記のようなものが出来上がりました。(画像小さくてすみません。)</p>

<p><img src="/images/InvadersClassFigure.png" alt="invaderClassFigure-1" /></p>

<p>登場するオブジェクトは、invader(画面上方に５５匹いる宇宙人)、tank（プレイヤー）、lazer(インベーダーの攻撃)、missile（プレイヤーの攻撃）、wall（レーザー攻撃を防
ぐ壁）、field（各キャラクターの座標を記録）、それとコントローラー（viewを管理、モデルに指示を送る）と各種Viewです。</p>

<p>当時はjavaでプログラミングの学習をしていたのですが、viewを作成する方法などをいま
いち理解していなかったところもあり、なんだかこのままクラスを実装しても動かないの
では？という感じのクラス図になってしまってます。</p>

<p>当初考えていたのは、各キャラクターのクラスが存在し、その座標を(二次元配列などで)管理するFieldクラスがあり、そのFieldクラスが各インスタンスの座標を比較して、衝突判定などを行うというものでした。</p>

<p>各キャラクターの座標の移動や、ミサイルとインベーダーの衝突でイン
ベーダーが消えるといったことをこまめに確認していかないといけないのですが、そのた
めに考えたのが、Fieldのインスタンスを、たとえば0.3秒ごとにnewして、Fieldのコンス
トラクタ内で各キャラクターのインスタンスの座標を受け取り、衝突や移動を確認すると
いう解決策でした。（ややこしいですね。つまりFieldの更新＝Fieldインスタンスの生成、みたいに考えてました。）</p>

<p>結果的にはこんな面倒なことをする必要はなかったのですが、xcodeとObjective-cを学習
するまえは、こんな感じで考えてました。</p>

<h2>Objective-cを学ぶ、そして実装</h2>

<p>iphoneアプリを作るということで、入社後一ヶ月ほど勉強していたJavaから離れて、まず
はObjective-cを勉強し始めました。</p>

<p>書籍にて、objective-cの基礎とxcodeの使い方を流し読みし、コードを一部写経しつつ一
通りの内容を学んでから実装に入りました。</p>

<p>流し読みしただけだったので実装では、コードの書き方が分からない、という事態が多発
しました。その度に参考書の該当箇所を参照しながら実装しました。</p>

<p>たとえば、画面にviewを追加するにはまずUIImageView クラスのインスタンスを生成し、そ
こに画像をプロパティとしてもたせて、最後に親viewにaddするという手順を踏みますが、このコードを書くにも、その度に本を参照しながら書いてました。</p>

<p>また、配列の使い方にも苦労しました。objective-cでは配列に基本データ型を代入できないので、配列に入っている座標（数値）を取り出す際にintValueメソッドを使う必要が
あります。これを知らずに配列から数値を変数に取り出して使っていると、いつの間にか
変数に13740といったすごく大きな数値が入っていたりして驚きました。これも、ちゃんと参考書の第三章の配列の使い方の箇所に載っていました。</p>

<p>ほかにもインベーダーがおかしな動きをしたり、尋常じゃない数のレーザー攻撃が降って
きたりと、数え切れないほどのバグが発生したのですが、その都度googleや参考書を頼り
ながらひとつずつ解決していきました。</p>

<p>そしてついにインベーダーゲームが完成しました。</p>

<p>コードをここにアップするのもあまりに冗長なので、完成したゲームのクラス図をアップ
します（下記のものです）。</p>

<p><img src="/images/InvadersClassFigure2.png" alt="InvaderClassFigure2" /></p>

<p>当初の設計とはかなり違ったものになりました。</p>

<p>まず、Fieldクラスはなくしました。よく考えてみれば、各クラスの座標はわざわざどこかにまとめて管理しなくても、その都度、各インスタンスの座標を比較して衝突を判定す
ればいいということに気がつきました。</p>

<p>それから当初Fieldクラスのコンストラクタ（objective-cのイニシャライザ）に記述しよ
うと考えていた、衝突判定やViewの移動といった処理は、他のクラスとしておのおの切り
出しました。基本的にViewControlerがこれらのクラスのメソッドを（timerをつかって）
一定時間ごとに呼びだすことにして、処理を行わせました。</p>

<p>model側とview側の両方にinvaderやtankといったクラスが存在しますが、これはmodelとviewを分けて、viewはmodelを参照するだけにするという形にしたかったので分けました。
model側の座標はx = 0 ~ 22, y = 0 ~ 11の範囲の整数値で持っています。viewはその座標値に定数を掛けて、画面上の座標を決定しています。</p>

<h2>感想</h2>

<p>インベーダーアプリを作ってみて、かなりいい勉強になりました。</p>

<p>何より、<strong>アプリをひとつ作ったという達成感</strong>があります。</p>

<p>これまで書いてきたプログラムと違って、viewが存在するということもあり、自分がコー
ドで書いているものがそのたびに形になっていくのがうれしかったです。ものをつくって
いるという感覚があって、没頭して作業することができました。</p>

<p>それから、実装していく中で感じたのが、ものをつくるのは問題解決の繰り返しなんだと
いうことです。</p>

<p>今回、実装していく中でバグが発生することが多々あったのですが、その
たびに原因を追究して、代替策を考え、実装してみて狙い通り動作するかを試すというこ
とを繰り返してました。</p>

<p>ときには問題にはまってしまって解決するのに数時間かかるよう
なこともありました。ただ、何度もそれを繰り返しているうちに、問題が発生してから原
因を探るスピードがあがっていくのを感じました。それもまた、大きな収穫かと思います
。</p>

<p>総じて、ひとつのものを作り上げることの苦労とやりがいを感じた課題でした。
新しい言語(objective-c)の習得に始まり、ツール(xcode)の使い方を学び、実装では問題
を解決しつづけるというなかなか密度の濃い内容だったと思います。</p>

<p>この課題を通して得た、地道にこつこつと問題を解決していく考え方をしっかり今後に生
かしていきたいです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[テスト業務を行いました]]></title>
    <link href="https://sachool.jp/blog/entry/2016/06/02/test/"/>
    <updated>2016-06-02T14:34:27+09:00</updated>
    <id>https://sachool.jp/blog/entry/2016/06/02/test</id>
    <content type="html"><![CDATA[<p>こんにちは、東京オフィスのイッセイです。</p>

<p>入社して約2ヶ月となりましたが、初の業務として、テスト業務を行いました。  <br/>
その時の事を書いていこうと思います。</p>

<!--more-->


<p>そもそもテストって何をするものなのか、具体的にどのような作業なのか、ミーティングを通して
とても重要な業務である事を知りました。</p>

<p>システム障害が発生した場合、どこに責任があるのか。
それは<em>実装した人ではなくテストを行った人の責任</em>という話がありました。</p>

<p>テスト業務が障害を起こさないようにする最終チェックである事を聞き、身が引き締まる思いをした所から始まった、怒涛の一週間でした。</p>

<h2>準備が大切</h2>

<p>実際にテスト業務は何を行うのかというと、ざっくりですが、システムが事前に設計した意図通りに動くかをチェックする作業です。<br/>
その為には、サービスの事やシステムの動きを理解している必要があります。</p>

<p>実際の開発だと、実装する人が自らテストを行うと聞きましたが、今回は何も分からない中からのスタートだったので、テストチームで認識を合わせるミーティングを入念に行いました。<br/>
様々な条件をもとに動きが変わってくるので、その動きを追う事と、試験書に書かれている項目が何を意図した試験であるかをしっかり理解して行わなければなりません。<br/>
その為に、事前に曖昧なところを無くしておく事が必要でした。</p>

<h2>地道な作業の連続</h2>

<p>実際のテスト業務は、画面を順に操作しながら意図しない動きがあったら指摘し、修正して貰います。<br/>
例えばバリデーションという、いわゆる入力のチェックを行うものがあるのですが、</p>

<ul>
<li><p>最大文字数+1、最大文字数、最大文字数-1という3種類での入力を行い、不適切な入力でエラーメッセージが表示されるか</p></li>
<li><p>入力する文字の種類によって、エラーメッセージが適切に表示されるか</p></li>
<li><p>フォームが複数ある場合、1つだけ不適切な入力をした際でも適切にエラーメッセージが表示されるか</p></li>
</ul>


<p>など、様々なテストがあります。</p>

<p>具体に実際あったバグの例をあげるとこんな感じ。</p>

<blockquote><p>一回目の入力で不適切な入力を行うと適切なエラーメッセージが表示されるが、
2回目以降でエラーメッセージが表示されず処理が進んでしまう。</p></blockquote>

<p>この謎の挙動に対して、様々な言葉が飛び交い、考えられる要因を1つずつ潰しながら修正を行っていました。<br/>
僕にはまだ分かりませんでしたが修正も一筋縄ではいかない作業だと実感すると同時に、一回適切に動いたからと油断できないなーとテスト業務の大変さを垣間見た瞬間でもありました。</p>

<h2>テスト業務を通して</h2>

<p>基本的には様々なテストを実施し、修正を依頼、そして修正されたものを再テストするという流れの繰り返しでした。
でもそれだけではなく、意図通りの動きだけではなく意図しない動きをわざと行ってバグが発生しないかをチェックするテストも行いました。改めて、世に出すためにはあらゆるテストを行なわなければならないんだなーと、また予期せぬバグに対応する為にも幅広い知識が必要だと感じました。</p>

<p><em>しかし、ただ大変だっただけではなく勿論学ぶ事もありました。</em></p>

<ul>
<li><p>使用したツールも初めて触るものが殆どだったので、そうしたツールの使い方を知る事ができた事。</p></li>
<li><p>フォームの入力や、チェックボックスの動きでDBの値が変化し、またDBの値で表示を変更しているといった事を、実際に画面やDBを操作することが出来た事。  (これは今行っている課題がどう展開されていくのかをイメージをする良いきっかけになりました。)</p></li>
<li><p>そして何より書籍やWebサイトを通じて学習してきたWebの仕組みも、実際に動かし、その反応を見ながら進める事ができ、まさに百聞は一見にしかずとはこの事だなーと、理解が深まった気がします。</p></li>
</ul>


<p>あと「password」と入力する回数が多く、テストを通じて2倍ぐらい速くなったのも収穫ですかね。<br/>
Wのとこが苦手だったので、良かったです。。　　</p>

<p>以上テスト業務を通して感じた事を書いてみました。<br/>
開発に関われるよう、目の前の課題を頑張ろうと思います。</p>
]]></content>
  </entry>
  
</feed>
