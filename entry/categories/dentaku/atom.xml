<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: 電卓 | Sachool Engineering Blog]]></title>
  <link href="https://sachool.jp/blog/entry/categories/dentaku/atom.xml" rel="self"/>
  <link href="https://sachool.jp/blog/"/>
  <updated>2017-04-12T19:21:53+09:00</updated>
  <id>https://sachool.jp/blog/</id>
  <author>
    <name><![CDATA[Sackle]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[電卓アルゴリズム]]></title>
    <link href="https://sachool.jp/blog/entry/2016/05/06/calc-algo/"/>
    <updated>2016-05-06T10:40:06+09:00</updated>
    <id>https://sachool.jp/blog/entry/2016/05/06/calc-algo</id>
    <content type="html"><![CDATA[<p>好きなサッカー選手はガットゥーゾです。<br/>
こんにちは、東京オフィスのイッセイです。</p>

<p>早速前回の続きを書いていきたいと思います。</p>

<p>今回の課題</p>

<h2>問題文</h2>

<blockquote><p>「×」「÷」を加えた電卓アルゴリズムの作成<br/>
２＋３×４＝１４<br/>
となるようにして下さい。</p></blockquote>

<!--more-->


<p>解決しなければいけない問題がこれでした。</p>

<p><strong>×、÷を優先する処理</strong></p>

<p>モウホントチンプンカンプン。
この時頭の中では、糸がぐるぐる絡まって、ほどけなくなっている状態。固結びが何個も出来ているような。<br/>
絡まっている糸を一本ずつほどいていこうと格闘した後が以下の内容です。</p>

<p>まず前回同様<br/>
１つの演算子を使いまわす形で解決できるか考える。</p>

<p>うーん、違う。優先できない、、</p>

<p>恐らく１０秒はかかってます。<br/>
しかし、そこでふと思ったのがこちら。</p>

<ul>
<li>一回目に＋－が入力されたら一度演算子を保留にしておいて、二度目に＋－が入力されたら一度目の演算子の左右の数値で演算を行う。</li>
<li>二回目に×÷が入力されたら、もう一度数値を入力して×÷の左右にある数値で演算を行う。</li>
<li>×÷の演算を終えたら変数に代入して加減算として最初に入力された数値と演算を行う。<br/>
以上の繰り返しでどうか。</li>
</ul>


<p>よしよし、と紙に書いてみるもあっさり失敗。<br/>
解決した風に書いてありますけど全然出来てないですね。<br/>
連続で×÷が入力された時の処理を考えられていなかったです。<br/>
もうそれはそれは驚異的に短絡的な考え方で、、</p>

<p>はい。次！</p>

<ul>
<li>×÷が入力されたら、＋－が入力されるまで同じ処理を繰り返すようにする。</li>
<li>一度目に入力された場合は、＋－が入力されるまでその演算結果を変数aに代入する。そして次の数値を変数bに入力し、同じ流れで＋－の入力を待つ。</li>
<li>二度目に入力された場合は、一度目に入力されている演算子を記憶しておき、×÷を繰り返した演算結果を変数bに代入する。</li>
<li>＋－が入力された時、変数aと変数bを記憶していた演算子で演算する。</li>
</ul>


<p>なんか近づいてきたような。<br/>
ところがここで再び致命的なミス。</p>

<p>「＝」が入力された場合の処理を考えていない、、</p>

<p>そこで、＝が入力された時の事から考える。</p>

<p><strong>＝の前に、＋－が入力されている場合</strong></p>

<ul>
<li>変数aと変数bを演算し、変数aに代入し変数aを表示して終了</li>
</ul>


<p><strong>＝の前に、×÷が入力されている場合。</strong></p>

<ul>
<li>変数aと変数bを演算し、変数aに代入し変数aを表示して終了。(問題はこの先)</li>
</ul>


<p><strong>更に前に＋－が入力されている場合</strong></p>

<ul>
<li>＋－の前の変数はaとするため、変数を1つ増やす必要がある。変数cを追加。</li>
<li>×÷の後に変数cに数値を代入して変数bと変数cで演算を行い変数bに代入。これを×÷が出る限り繰り返す。</li>
<li>そして、＝が入力されたら変数aと変数bを演算して変数aに代入。変数aを表示して終了。</li>
<li>再び＋が入力された際は、その前の演算子で変数aと変数bを演算子変数aに代入。</li>
</ul>


<p>これで繰り返し処理を行う事ができ、×÷の優先にも対応する事ができます！！<br/>
後はこの演算子を入力する変数をどうするかを考えるだけです。</p>

<p><strong><em>最終的に導き出したもの</em></strong></p>

<ul>
<li>１度目の演算子入力はop1に。</li>
<li>２度目の演算子入力はop2に。</li>
<li>① op2の演算子入力で＋－が入力された場合は、<br/>
変数aと変数bをop1で演算し変数aに代入。op2をop1に代入し、その後op2に演算子を入力する。</li>
<li>② op2の演算子入力で×÷が入力された場合は、<br/>
変数bと変数cをop2で演算し変数bに代入。その後op2に演算子を入力する。</li>
<li>＝が入力された場合、変数aと変数bをop1で演算して変数aに代入し、変数aを表示して終了。</li>
<li>op2に演算子を入力した後、①、②のどちらかのパターンを繰り返す。</li>
</ul>


<h2>実装して検証する。</h2>

<p>上記で考えたものを実装していきます。</p>

<pre><code> #include &lt;cstring&gt;
 #include &lt;cctype&gt;
 #include &lt;iostream&gt;
 using namespace std;
 int main(){
    double a,b,answer;
    char op1,op2;
    cout &lt;&lt;"演算開始\n加算：+ 減算：- 乗算：* 除算：/ 終了：=\n";

    for ( cin &gt;&gt; a ; !cin ; cin &gt;&gt; a){
        cin.clear();
        cin.ignore();
        cout &lt;&lt;"数値を入力して下さい";
    }

    answer = a;
    for ( cin &gt;&gt; op1; !(op1 == '+'||op1 == '-'||op1 == '*'||op1 == '/'||op1 == '='); cin &gt;&gt; op1){
        cin.clear();
        cin.ignore();
        cout &lt;&lt;"演算子をを入力して下さい";
    }

    if(op1 == '=') goto Ending;


    for ( cin &gt;&gt; b ; !cin ; cin &gt;&gt; b){
        cin.clear();
        cin.ignore();
        cout &lt;&lt;"数値を入力して下さい";
    }

    for ( cin &gt;&gt; op2; !(op2 == '+'||op2 == '-'||op2 == '*'||op2 == '/'||op2 == '='); cin &gt;&gt; op2){
        cin.clear();
        cin.ignore();
        cout &lt;&lt;"演算子をを入力して下さい";
    }


    do{
        if(op2 == '+' || op2 == '-'){
            switch(op1){
                case '+' : a = a + b; break;
                case '-' : a = a - b; break;
                case '*' : a = a * b; break;
                case '/' : a = a / b; break;
            }
            op1 = op2;

            for ( cin &gt;&gt; b ; !cin ; cin &gt;&gt; b){
                cin.clear();
                cin.ignore();
                cout &lt;&lt;"数値を入力して下さい";
            }
        }else if(op2 =='*' || op2 == '/'){
            double c;

            for ( cin &gt;&gt; c ; !cin ; cin &gt;&gt; c){
                cin.clear();
                cin.ignore();
                cout &lt;&lt;"数値を入力して下さい";
            }
            switch(op2){
                case '*' : b = b * c; break;
                case '/' : b = b / c; break;
            }
        }else break;
        for ( cin &gt;&gt; op2; !(op2 == '+'||op2 == '-'||op2 == '*'||op2 == '/'||op2 == '='); cin &gt;&gt; op2){
            cin.clear();
            cin.ignore();
            cout &lt;&lt;"演算子をを入力して下さい";
        }
    }while(op2 != '=');

    switch(op1){
        case '+' : answer = a + b; break;
        case '-' : answer = a - b; break;
        case '*' : answer = a * b; break;
        case '/' : answer = a / b; break;
    }
    Ending :
    cout &lt;&lt; answer &lt;&lt;"\nfin";
 }
</code></pre>

<p>多々修正を行いました。<br/>
実装してみて、ループの戻り先がハチャメチャだった事に気付いたからです。<br/>
do-while文の部分は、実際作成したフローチャートではとても実装できるような処理の流れではありませんでした。<br/>
しかし、コードのことを考えながらアルゴリズムを考える事ができればもう少し考えやすくなるかも、と思いました。以後試したいと思います。</p>

<h3>まとめ</h3>

<p>以上で今回の課題は終了ですが、中々苦戦したこの課題を通して大事な事を学びました。  <br/>
私はこれまで無意識に、短絡的な考えのもと生活をしてきた事に気付きました。<br/>
そしてそれがアルゴリズムを考えるだけでなくエンジニアとして生きていくうえで致命的であることを身をもって感じました。  <br/>
求める結果から課題を導き、順序だてて解決していかなければならない。<br/>
都度、論理的に考えられているか自分で確認しながら取り組んでいこうと思います。<br/>
大事というか、今更かよ！的な話ですが、、<br/>
こんな私の成長を、ブログから感じ取っていただけるよう今後も精進いたします。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[電卓アルゴリズムの作成]]></title>
    <link href="https://sachool.jp/blog/entry/2016/05/02/calculator-chart/"/>
    <updated>2016-05-02T12:04:32+09:00</updated>
    <id>https://sachool.jp/blog/entry/2016/05/02/calculator-chart</id>
    <content type="html"><![CDATA[<p>はじめましてk&#95;yoshidaです。
電卓を作成する課題取り組みを行いました。</p>

<!-- more -->


<h1>課題</h1>

<p><strong><em>四則演算を行えるアルゴリズムの作成</em></strong></p>

<h2>四則演算アルゴリズムつくる前に</h2>

<p>四則演算を行うのにルールをまず整理しました。</p>

<p>&ndash; 掛け算・割り算が優先される</p>

<p>&ndash; 足し算・引き算が掛け算・引き算より優先度が低い</p>

<p>計算される優先度とまとめると</p>

<p><strong>掛け算・引き算　>足し算・引き算</strong></p>

<p>となります</p>

<p>ざっくり思いついたままチャートを作成しました。
掛け算と割り算は先に計算し,計算結果と演算子を含んだ配列を入れて,足し算引き算を後で計算するようにチャートを作りました。</p>

<p><img src="/images/calulator1.png" alt="チャート図" /></p>

<p>値取得関数<br/>
<img src="/images/number1.png" alt="関数" /></p>

<hr />

<p>計算式を入力されたとき,配列に入れてから読み込みを行うようにしました。
コードベースに落とて検証を行いました。読み込んだ文字列を一つづつ添字を動かして読みこむようにしていましたが,添字の指定がおかしくて思ったような動きではありませんでした。さらに読み込んだ配列の領域以外にアクセスしようとしてエラーが出てしまいました。
読み込む際に呼んでいる関数内の処理が正しくなかったので失敗しました。</p>

<p>値取得関数内にある添字を操作するチャートを修正して計算させようとしましたが,またしても配列をみるための添字の操作がおかしく計算が正常にできませんでした。　</p>

<p>添字の操作でミスが多かったので修正を加えて再度チャートを作成しました。</p>

<p><img src="/images/calulator2.png" alt="チャート図" /></p>

<p><a href="/images/number2.png">値取得関数</a></p>

<hr />

<p>値取得関数を修正,計算するときのおかしかった挙動を修正してコードベースで再度検証を行い無事動くところまでできました。</p>

<p>がしかし、<strong><em>アルゴリズムに無駄な処理がある事と（）を含んだ式でも動くように</em></strong> と指摘と新たな課題がでました。</p>

<p>アルゴリズムに無駄な処理があるという事を指摘を受け,全体を見な押して見ることにしました。</p>

<p>掛け算割り算をしている時に足し算引き算を行っていれば,ループ処理が減る事に気が付きました。
そこで計算結果をいれる変数を作成して,無駄に使っていた配列を使わなくてよくなりました。<br/>
（）があったときの処理にどのようにしたらよいかと壁にあたりました。</p>

<p>()の中を先に計算してしまってまた計算に戻るというフローにしたかったので関数を呼び出すようにしました。
最終的に以下のようなチャートになりました。</p>

<p><img src="/images/calulator_frow.png" alt="チャート図1" /></p>

<p><a href="/images/number_calulator.png">値取得関数</a></p>

<p><a href="/images/brackets.png">（）があったときの関数</a></p>

<h3>考察</h3>

<p>数年ぶりにフローチャートを書くことになって忘れていることが多く,なかなかうまく書けなかったです。書き方アルゴリズムの考え方を思い出しつつ行っていました。はじめは思いついたままアルゴリズムを作っていて,動作できなかったり変な挙動をしていましたが,少しづつ良くなっていくのが見えてアルゴリズムを作っていくうえでこうなればよいと思えるようになりました。</p>
]]></content>
  </entry>
  
</feed>
