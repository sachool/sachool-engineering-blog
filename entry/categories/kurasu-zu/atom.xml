<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: クラス図 | Sachool Engineering Blog]]></title>
  <link href="https://sachool.jp/blog/entry/categories/kurasu-zu/atom.xml" rel="self"/>
  <link href="https://sachool.jp/blog/"/>
  <updated>2017-04-12T18:56:15+09:00</updated>
  <id>https://sachool.jp/blog/</id>
  <author>
    <name><![CDATA[Sackle]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[【課題】ビデオカメラのクラス図を考える]]></title>
    <link href="https://sachool.jp/blog/entry/2016/05/13/class-diagram/"/>
    <updated>2016-05-13T09:25:57+09:00</updated>
    <id>https://sachool.jp/blog/entry/2016/05/13/class-diagram</id>
    <content type="html"><![CDATA[<p>仙台ファクトリーのkish(@31_kish)です。</p>

<p>ビデオカメラのクラス図と聞いたとき、機能が多く、膨大なクラスの数になるだろうと思った。<br/>
IDEなどでクラスを作った場合、処理の流れがテストできるが<br/>
図だけで作ると処理の流れが見えないので、メソッドやプロパティを考えるのが難しい。</p>

<p>クラス図を元にプログラミングを行うと勘違いをしていたが<br/>
クラス図とはクラス間の関係を表現するものであり、細かいメソッドの処理などは考慮しなくても良いらしい。</p>

<p>クラス図を作るまでの過程を以下にまとめた。</p>

<!--more-->


<h2>機能を洗い出す</h2>

<p>実際にビデオカメラを触りながら大まかに機能を洗い出した。<br/>
あれ、意外と少ない。</p>

<ul>
<li>各種ボタンの動き</li>
<li>液晶画面に表示される内容</li>
<li>動画・静止画の撮影</li>
<li>動画・静止画のプレビュー</li>
</ul>


<h2>機能をMVCで考える</h2>

<p>次に行ったことは、MVCで表現すること。</p>

<h4>コントローラー</h4>

<ul>
<li>電源の管理（入・切）</li>
<li>ACアダプタの状態を監視</li>
<li>録画状態のビューを呼ぶ</li>
<li>ビューの入力を監視</li>
<li>録画ボタンの状態を監視（開始・停止）</li>
<li>ズームボタンの状態を監視（拡大・縮小）</li>
<li>撮影モードの状態を監視（動画・静止画）</li>
<li>画面の状態を監視、状態によるビューを呼ぶ（録画・再生・メニュー）</li>
<li>端子の状態を監視（接続済み・未接続）</li>
<li>モデルに状態を通知</li>
</ul>


<h4>ビュー</h4>

<ul>
<li>時計を表示</li>
<li>録画時間を表示</li>
<li>バッテリーの表示</li>
<li>モードを表示</li>
<li>メニューを表示</li>
<li>ズームボタンの表示</li>
<li>傾きを表示</li>
</ul>


<h4>モデル</h4>

<ul>
<li>コントローラーから通知を受け取る</li>
<li>傾きを補正</li>
<li>電源を切る</li>
<li>電源を入れる</li>
<li>ACアダプタの状態を受け取り、バッテリ、外部電源を変更</li>
<li>録画を開始</li>
<li>録画を停止</li>
<li>録画した動画を保存する</li>
<li>ズームボタンの状態を受け取り、レンズの状態を変更（拡大・縮小）</li>
<li>撮影モードの状態を受け取り、撮影モードの変更(動画・静止画）</li>
<li>端子の状態を受け取り、機器への接続を開始・停止</li>
</ul>


<h2>クラス図をつくった</h2>

<p><a href="/images/2016-05-10-video-camera.jpg"><img src="/images/2016-05-10-video-camera.jpg" alt="クラス図" /></a></p>

<p>はじめはViewがModelのインスタンスを持っていて複雑になっていたが<br/>
ご指摘をいただき、シンプルにまとめることができた。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ネスカフェバリスタのクラス図を作ってみた]]></title>
    <link href="https://sachool.jp/blog/entry/2016/05/11/nescafe-class/"/>
    <updated>2016-05-11T16:05:55+09:00</updated>
    <id>https://sachool.jp/blog/entry/2016/05/11/nescafe-class</id>
    <content type="html"><![CDATA[<p>どうも！仙台ファクトリーのkouです。<br/>
今回は、「ネスカフェバリスタ」のクラス図と格闘した話を綴っていきたいと思います。</p>

<!-- more -->


<h2>クラス図とは何か</h2>

<p>クラス図とは、一言で言うと<code>オブジェクト同士の関係性</code>を示したものです。<br/>
どういう風に動くかなどは一切考慮せずに、構造だけを示します。</p>

<h3>記述方法</h3>

<p>次のように記載します。<br/>
-&mdash;&mdash;&mdash;&ndash;<br/>
| クラス名 | <br/>
-&mdash;&mdash;&mdash;&ndash;<br/>
|    属性    | <br/>
-&mdash;&mdash;<br/>
|    操作    | <br/>
-&mdash;&mdash;</p>

<p>見づらくてすみません。<br/>
これを1つのクラスとして、各々のクラスを特殊な線形（関連とか集約）で繋いでいきます。<br/>
詳しくは、<a href="http://www.itsenka.com/contents/development/uml/class.html">IT戦科さんのクラス図（Class Diagram）</a>が参考になります。</p>

<h2>方針</h2>

<p>さて、ざっくりクラス図の書き方を押さえた上で作成に入ったわけですが、私は次のような方針を立ててクラス図の作成を進めました。</p>

<ul>
<li>①取り扱い説明書を読んで、どういう表示・機能があるか把握</li>
<li>②それらからオブジェクトを抽出</li>
<li>③そのオブジェクトの属性、操作を考える</li>
<li>④それらのオブジェクト間の関係性を記述する</li>
</ul>


<h2>①表示・機能の抽出</h2>

<p>まずは表面的な部分を抽出してみました。</p>

<h3>パネル表示</h3>

<ul>
<li>通常表示</li>
<li>コーヒー抽出表示</li>
<li>コーヒー抽出量調整中表示</li>
<li>カップ温め表示</li>
<li>電源切表示及びオートオフ表示</li>
<li>メンテナンス表示</li>
<li>リンス表示</li>
<li>給水お知らせ表示</li>
<li>抽出準備表示</li>
<li>各種エラー表示</li>
</ul>


<p>点灯パネルは6つしかないのに、パネルの組み合わせや色の変化でこれだけの表示種類がありました。</p>

<h3>機能</h3>

<ul>
<li>コーヒー作成機能</li>
<li>すすぎ機能</li>
<li>カップあたため機能  ＊ブラック系のみ可能</li>
<li>湯量調整機能  ＊ブラック系のみ可能</li>
</ul>


<p>ボタンの同時押しなどですすぎ機能やカップのあたためができます。
普段は、電源ボタンを押して飲みたいコーヒーのボタンを押すだけで出来上がるわけですが、詳しく見るとこのように多くの機能があります。 カップあたため機能を使っている人（というか知ってる人）はいるんでしょうか。。。</p>

<p>ちなみに私はコーヒー飲まないです。</p>

<h2>②オブジェクトの抽出</h2>

<h4><code>ここがもっとも苦戦したところです。 </code></h4>

<p>どれをどうオブジェクトにすればいいのか非常に悩みました。  さっぱり分からないんです。<br/>
最初は、ネスカフェ本体をネスカフェクラスとし、そして実際にコーヒーを作成する内部の部分をコーヒークラスとし、2つのクラスに詰め込もうとしました。<br/>
ネスカフェクラスがViewController担当、コーヒークラスがModel担当です。</p>

<p><img src="/images/class1.png" alt="alt octopress" /></p>

<p>ちなみにどうして、MVCモデルで考えたかというと</p>

<ul>
<li>M :　内部</li>
<li>V :　タッチパネル</li>
<li>C :　ボタン</li>
</ul>


<p>という風に見立てることができたからです。</p>

<p>上図でチェックしてもらったところ、更に細分化できるという指摘を受けたので、修正したのが下記になります。</p>

<p><img src="/images/class2.png" alt="alt octopress" /></p>

<h2>③オブジェクトの属性、操作の考察</h2>

<p>実際には②と同時並行に進めていましたが、</p>

<h4><code>ここも苦戦しました。</code></h4>

<p>構造を書く前に属性や操作をあちこちに書いていたため、どのクラスが何を管理するのかがぐちゃぐちゃになってしまったからです。（手順通りにやってれば。。。）<br/>
だからノートに役割をメモ書きしています。</p>

<p>まずはこちらを作成<br/>
<img src="/images/class3.png" alt="alt octopress" /></p>

<p>しかし、<br/>
・NescafeBlackModelが入力を持っているのはおかしい<br/>
・Controllerが曖昧<br/>
ということで考え直して、修正したのがこちら。</p>

<p><img src="/images/class4.png" alt="alt octopress" /></p>

<p>Controllerにボタンを押した際のイベント処理を全てまとめました。</p>

<h2>④オブジェクトの関係性の考察</h2>

<ul>
<li>各々のコーヒークラスがNescafeMakeModelクラスを継承【汎化】</li>
<li>MVC同士は、1:1の関連【関連】</li>
</ul>


<p><img src="/images/class5.png" alt="alt octopress" /></p>

<h2>課題の所感</h2>

<p>オブジェクトの関係性を表すのがクラス図なのに、属性や操作のことを考えすぎて思いの外に時間が取られてしまいました。<br/>
MVCモデルで考えられることに気づいたときに、一瞬視界が開けた気はしたのですが、なかなか細分化が進まずに苦戦しました。また、多重度も怪しいですし、ビューなんか。。。</p>

<p>まだフィードバックを受けてないので、受け次第修正点を追記していこうと思います。</p>

<p>今回は以上です。</p>
]]></content>
  </entry>
  
</feed>
