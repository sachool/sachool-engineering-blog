<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: web | Sachool Engineering Blog]]></title>
  <link href="https://sachool.jp/blog/entry/categories/web/atom.xml" rel="self"/>
  <link href="https://sachool.jp/blog/"/>
  <updated>2017-04-12T18:46:30+09:00</updated>
  <id>https://sachool.jp/blog/</id>
  <author>
    <name><![CDATA[Sackle]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[wordpressサイトリニューアルをした事]]></title>
    <link href="https://sachool.jp/blog/entry/2016/11/25/renewal-site/"/>
    <updated>2016-11-25T03:07:34+09:00</updated>
    <id>https://sachool.jp/blog/entry/2016/11/25/renewal-site</id>
    <content type="html"><![CDATA[<p>昨日,積雪があって冬だなぁと感じるようになりました。暖かい寄せ鍋が食べたいk_yoshidaです。</p>

<p>既存サイトをリニューアルを行いました。その事について記述していきたいと思います。</p>

<!--more-->


<h3>既存サイトをリニューアル</h3>

<p>今回は,既存で動いてるサイトをリニューアルする案件に携わりました。Google
目的として、既存サイトの使いづらさを無くして使いやすいようにする。また,より使いやすくするために機能追加が少しありました。<br/>
WordPressのDBデータを取り出して加工をするような機能を拡張,呼び出しを行っていきました。<br/>
まではいいのですが,<br/>
WordPressの関数を使うとhtmlタグが付随された状態で表示されたり,自動でリスト表示されてしまう。などがあったため,HTML構造がバラバラになってしまいました。</p>

<p>既存機能をそのまま使いたくてそのまま記述したら全く違う結果になって崩れていってしまいました。そのため正しくCSSがはまっていない事に&hellip;さらにAMP案件が</p>

<p>AMPとはGoogle社が新しく提案しているカスタムHTML記述です。スマートフォンが普及に伴ってスマートフォン向けのために作られたカスタムHTMLです。<br/>
詳しくは次の投稿に書きます。</p>

<h3>遅延していくスケジュール</h3>

<p>主に3点,が原因で遅延してしいました。</p>

<ol>
<li>既存のWordPressの機能をそのまま持ってきたため,HTML構造が崩れてしまった。</li>
<li>AMP対応にするために躓きが非常に多かった事</li>
<li>JavaScriptはまだ勉強し始めた段階で煮詰まってしまった事</li>
</ol>


<p>動作不良を起こしたとき,原因が全くわからなく先輩に聞くに聞けなく悩んでしまったのが時間を無駄にしてしまいました。
1日の目標を立て余裕を持っていたのですが詰まりに詰まってくると1日の目標が達成できなくなってしまいました。
先輩のフォローもあってか遅れながらもなんとかやり遂げました。</p>

<h3>まとめ</h3>

<p>Wordpressで詰まるというよりJavaScript,JQueryで詰まってしまっていたので,聞いたり,見たりしながら出来るようになりました。
余裕がなくなってしまうと急に視野が狭まる事が自分の中に有ることがわかりました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bulletin_Board_with_Java]]></title>
    <link href="https://sachool.jp/blog/entry/2016/07/22/bulletin-board-with-java/"/>
    <updated>2016-07-22T11:15:35+09:00</updated>
    <id>https://sachool.jp/blog/entry/2016/07/22/bulletin-board-with-java</id>
    <content type="html"><![CDATA[<h1>javaを使って掲示板作成</h1>

<p>どうも。新人エンジニアのhondaです。</p>

<p>今回は、java servletを使って掲示板を作成する課題に取り組んだので投稿します。</p>

<p>＊以下の内容はサーバサイドjavaのプログラムがどう動いているかを、全体的な視点で見たものを記述しています。理解があやふやなところはできるだけ調べて書いていますが、間違っている記述もあるかもしれません。参考程度に読んでいただければ幸いです。
また間違いなど、よろしればご指摘ください。</p>

<!-- more -->


<h2>はじめてのservlet</h2>

<p>java servletというjavaの機能を使ってwebアプリを作りました。</p>

<p>javaのプログラムは1ヶ月ほど学んできましたが、webはいろいろと分からないことが多く苦労したのでその辺を書いていこうと思います。</p>

<p>servletとはjavaでwebサービスを作るための、javaで書かれたプログラムで、webに必要なhttp通信等の機能を実装したクラス（？）の集合（パッケージ？）であると理解しています。</p>

<p>なので普通のjavaのプログラムにimportして使います。</p>

<p>そしてインポートするべきservlet-apiはjdkには入って無いのでダウンロードする必要があります。</p>

<p>tomcatというservletを動かすserverをインストールすればその中にservlet-api.jarというファイルがあるのでここにクラスパスを通します（環境変数の設定）。これにクラスパスを通せばservlet をimportしたjavaをコンパイルできます。</p>

<p>importするとhttp requestとresponse を使ってクライアントと情報のやり取りをすることができるようになります。</p>

<p>こんな感じで、servletを使える環境をつくりました。</p>

<h2>tomcatのファイル配置</h2>

<p>その後、理解に苦しんだのがtomcatにファイルをどう配置すればいいのかという点です。</p>

<p>いろいろと調べまわった結果、以下のようにファイルを配置すればいいことが分かりました。</p>

<p>まずtomcat内のwebapps下にプロジェクトのディレクトリを配置します。
（webapps/bulletinBoard みたいな感じ）</p>

<p>続いて、bulletinBoardの中にWEB-INFというディレクトリを作ります。
（bulletinBoard/WEB-INF）</p>

<p>そして、このWEB-INFの中にservletプログラムを配置します。</p>

<p>最後に、WEB-INF下にweb.xmlというファイルを作ります。ここにはservletにアクセスするためのurl等が記録されています。</p>

<p>基本的にはこの構成でサーブレットを動かします。</p>

<p>servletを継承したjavaクラスファイルをWEB-INF下に置き、web.xmlに記述したurlでブラウザからアクセスします。</p>

<p>たとえば、web.xmlにlogin というURLとLoginServlet.javaというservletファイルの関連を記述しておけば、webからはlocalhost:8080/bulletinBoard/loginといったURLでservletファイルにアクセスできます。</p>

<p>WEB-INF下のファイルにはブラウザからは直接アクセスできないので、web.xmlに記載のurlにアクセスしてもらって、そのURLとweb.xmlを元にサーバーはservletを探し出して、クライアントにサービスを提供します。</p>

<h2>servletでMVCモデルを構築</h2>

<p>servletでwebアプリを作るときは、</p>

<ul>
<li><p>servlet →　コントローラー（クライアントからリクエストを受け付けて、必要な処理をモデルに指示して、情報をビューに返す）</p></li>
<li><p>java Beans （あるいは普通のjavaクラス？） →　モデル（コントローラーから指示を受けて情報を処理。DB通信もこのクラスで行う）</p></li>
<li><p>jsp →　ビュー（コントローラーから受け取った情報をhtmlとして表示）</p></li>
</ul>


<p>という役割分担でクラス設計をします。</p>

<p>jspとはhtmlにjavaのコードを埋め込むようにして使えるようにしたプログラムのことです。htmlにjavaコードが入っているので、servletからもらったDBの情報などをjavaからテキストとして出力し、ブラウザはそのテキストを読み込みます。ということなので、テキスト出力はHTMLの文法にのっとって書きます。
（実際はjspもservletを継承したクラスで、servletがout.println()とかやってテキスト（HTML）を出力するのを、うまいこと書きやすいように変換してるプログラム？みたいです。なので、jspを読み込む際は、jspをjavaプログラムに変換 → コンパイル → 実行 → HTMLのテキストが出力される → ブラウザはこれを読む という感じになっているのだと思います。）</p>

<p>その一方、java Beans　はモデルとしてビジネスロジックを担当します(とwikipediaには書いてあります)。java Beansとはプロパティとそれに対するgetter, setterを持った普通のjavaクラスです。このプロパティに、たとえばDBからとってきたデータをセットして、コントローラー → ビューに渡して表示をします。ということなので、java Beans自体は情報だけ保持して処理を持たないので、DB接続等の処理は普通のjavaクラスに持たせます。</p>

<p>そして、servletはクライアントからのリクエストを受け付けて、内容によって処理を分岐させてモデルに処理を指示して、処理した情報を受け取ります。その後、表示すべきjspを選択しクライアントに表示します。クライアントがjsp(HTMl)を参照して再びリクエストを送ってくるとサーブレットがこれに対応します。</p>

<p>（というわけなので、基本的にjspファイル（ビュー）もサーブレット経由で表示するので、ブラウザから直接は見えないWEB-INF下に配置します。いちおうWEB-INF外に置いてブラウザから直接アクセスしてもらうこともできます。</p>

<p>そして、気をつける点として、WEB-INF下にCSSやJSファイルを置くと、ブラウザから参照できないのでフロントに反映されません。これは、jspファイルにアクセスするとjavaプログラムの出力としてHTMLが表示され、ブラウザはこれを読み込んだ後にHTMLに記載のlinkをたどってcss,JSを読みに行こうとするからです。つまりservletの指示で読み込みに行っているわけではないので、WEB-INF下は参照できない、と理解しています。）</p>

<h2>掲示板の作成</h2>

<p>以上の感じでサーバサイドjavaを理解しつつ、掲示板を作成しました。</p>

<p>今回は</p>

<ul>
<li>apache-tomcat-8.0.36</li>
<li>mysql 15.1</li>
<li>IDEはeclipse</li>
</ul>


<p>で作成しました。</p>

<p>成果物は会員制の掲示板で以下の機能があります。</p>

<ul>
<li>会員制でユーザー名とパスワードで認証</li>
<li>カテゴリー→スレッド→コメントという階層状に情報を保存</li>
<li>画像のアップロードできる</li>
<li>会員別に投稿情報を管理し、自分の投稿のみを削除できる</li>
</ul>


<p>大雑把にはこんな感じです。</p>

<p>いちおうクラス図だけアップしておきます。</p>

<p><img src="/images/0295_honda.jpg" alt="掲示板クラス図" /></p>

<p>掲示板作成後に知ったのですが、DB接続はそれぞれの処理（SELECT、UPDATE、INSERT、DELETEなど）ごとに分けるべきらしいです。また、各サーブレットごとにセッションクラス（？）を用意して、処理を記述する方法もあるらしいです。</p>

<h2>課題を終えて</h2>

<p>ひとつのwebアプリケーションを作ってみることで、全体像が理解できて大変勉強になりました。</p>

<p>webアプリひとつ作るだけで、HTML,CSS,Javascript,サーバサイド言語の4つのスキルを身につけなければならず、求められるものが多いなと感じました。</p>

<p>また、webの技術はブラックボックスが多いなと感じました。たとえば、httpリクエストを送るときにはどんなプログラムが動いているのかなどを考えなくても、getとpostで送信するんだと理解しておけばコードは書けます。</p>

<p>ただ、その裏側まで理解した上でプログラムを作っていくことが重要だと思いました。それが本質を理解してコードを書くということだと思います。</p>

<p>総じて、webの技術の奥の深さが分かった課題でした。</p>
]]></content>
  </entry>
  
</feed>
