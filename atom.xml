<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Sachool Engineering Blog]]></title>
  <link href="https://sachool.jp/blog/atom.xml" rel="self"/>
  <link href="https://sachool.jp/blog/"/>
  <updated>2017-04-12T18:46:30+09:00</updated>
  <id>https://sachool.jp/blog/</id>
  <author>
    <name><![CDATA[Sackle]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[入社から二ヶ月が経って]]></title>
    <link href="https://sachool.jp/blog/entry/2017/04/12/two-month-later/"/>
    <updated>2017-04-12T17:43:49+09:00</updated>
    <id>https://sachool.jp/blog/entry/2017/04/12/two-month-later</id>
    <content type="html"><![CDATA[<p>仙台のhです。入社してもうすぐ二ヶ月。あっという間でした。</p>

<p>私はもともとサクール（sachool）を受講していたので、<br/>
入社までの経緯～入社してから～のことを書きたいと思います。</p>

<!--more-->  


<p>エンジニアとはかけ離れていた異業種で働いていましたが、<br/>
なんやかんやあって興味を持ち、自分で基礎学習から始めました。<br/>
座学など学んでみたものの、それがどこに繋がるのか?何が必要なのか?などわからず、<br/>
どこかのスクールで勉強をと思いこのsachoolの受講を決めました。</p>

<p>基礎コースではプログラミングを行う以前の基礎を学び、その後PHPコースも受講しそこでプログラミングを初体験しました。
最後の方で、ショッピングサイトを受講生で作り、私が担当したところはデータベースを使い、会員の新規登録・ログイン・パスワード再発行の処理でした。</p>

<p>やはり独学だけでは理解しがたいところが多く、疑問な点などを教えてもらうこともできたので、<br/>
このsachoolに通ったことはとてもよかったと思います！</p>

<h3>スクールを経てからの入社</h3>

<p>もともと転職することを目的として受講していました。<br/>
sackleへ入社することができ、現在はjavaの書き方やオブジェクト指向など一から学び、<br/>
実際にandroidアプリを作る～というようなことをやってます。まだ、プロジェクトへの参加はしていません。。</p>

<h3>二ヶ月経ってみて、、、</h3>

<p>何個かアプリを作っていた途中で気づいたのですが、作るということだけを重点においてしまっていたのか、実際の処理のところを深く理解せずに作ってしまっていました</p>

<p>そのため、いざ自分でコードを書こうとすると、ひとつひとつで躓き。。</p>

<p>サイトなどを参考にしたときにも、自分で理解した上で取り入れることの大切さを学びました！</p>

<p>そしてお忙しい中教えてくださっている方々へ感謝しつつ、、<br/>
教えられたことを自分に取り込めるよう努力します。</p>

<p>またクラスやメソッド、変数名など、正しい名前がつけられるようになりたいです。<br/>
あれ、これなんだっけとなりました。（切実）</p>

<p>長くなりました。。<br/>
最後に、これを書いているときにSlackで流れてきたメッセージの中にサイトリンクがありました。<br/>
「そうだそうだ、、、！！」とサイトを見て感じたので貼ります。↓↓↓</p>

<p><a href="http://qiita.com/Mic-U/items/f9de1c08c47c50620905">リンク</a></p>

<p>それでは失礼します！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ランディングページの制作（競合調査・研究）]]></title>
    <link href="https://sachool.jp/blog/entry/2017/02/22/lp-research/"/>
    <updated>2017-02-22T17:25:37+09:00</updated>
    <id>https://sachool.jp/blog/entry/2017/02/22/lp-research</id>
    <content type="html"><![CDATA[<p>こんにちは。デザイナーのoguraです。<br/>
今回も引き続き、LPに関することで一つ、<br/>
競合ページの調査をした時のことを書かせていただきます。</p>

<!-- more -->


<h2>競合のLPの研究・調査をする</h2>

<p>LPの研究・調査はLPにおいて、重要な工程です。<br/>
競合他社は、どのようなアプローチを行っているかを知ることで、<br/>
自分の売る商品のアピール方法を上手く差別化できるなど、<br/>
LPについての対応策を考えることができるそうです。</p>

<p>今回は、社内にあった転職サイトのキャンペーンのチラシを<br/>
題材にしたLPを作ると仮定し、他社の転職求人サイトのLPを調査しました。</p>

<h3>検索結果の上位ページや、リスティング広告のページから競合サイトを閲覧し、下の項目について、書き出してみました。</h3>

<ul>
<li>商品（サービス）の訴求</li>
<li>商品（サービス)のターゲット層</li>
<li>商品（サービス）の強みや実績</li>
</ul>


<h4>まずは商品（サービス）の訴求に関する項目。</h4>

<p>全て重要な項目ですが、特に重点的に見たのは「ターゲット層」です。<br/>
LPをより成約率を高めるには、ターゲットとなる顧客の性別や職種、<br/>
商品の目的や生活背景まで詳細に分析することが必須です。</p>

<p>ターゲット層の絞り込みが難しそうだと感じたため、<br/>
調査の段階で、自分のターゲットを特定する前に、<br/>
他社競合のサイトのターゲット層を詳細にまとめようとしましたが、<br/>
中々ターゲット層を特定するのは難しく、軸がぶれぶれになりました。</p>

<h3>またサイトの項目やデザインに関することで、以下の項目も調査しました。</h3>

<ul>
<li>メインビジュアル</li>
<li>LPの構成</li>
<li>CTAの個数・配置・フォームの種類（違う種類の窓口があるか否か）</li>
</ul>


<h4>メインビジュアル</h4>

<p>メインビジュアルはサイトの掴みとなる部分です。<br/>
ユーザーがぱっとビジュアルを見て、<br/>
自分の目的の情報がないと判断した場合、<br/>
サイトの離脱がおきてしまいます。<br/>
使用写真の傾向、配色、構図で<br/>
どうターゲットの訴求につながるかまとめました。</p>

<h4>LPの構成について</h4>

<p>コンバージョンにつなげるために、
どういった構成で訴求をさせているか、<br/>
構成の傾向を見ました。</p>

<p>傾向としては、
メインビジュアル下辺りに、転職求人のサービスに関する特徴が、<br/>
3つほど挙げられている構成は、どのLPでも見られました。<br/>
メインビジュアルで興味をもったターゲットに、<br/>
サービスを簡潔に説明し、サービス内容にも興味をもってもらうためには、<br/>
こういった構図が一番だと学びました。<br/>
※ちなみに「3」という数字にも意味があるそうです。<br/>
　気になった方は、「マジックナンバー3」で調べてみてください。</p>

<h4>CTAについて</h4>

<p>CTAについてはコンバージョンを達成するために、<br/>
コンテンツのどういった区切りで、CTAを配置しているのか<br/>
また配置場所に傾向があるのか気になったため、まとめました。<br/>
今回調査したページに関しては、大きな利点（ポイント）を説明するコンテンツの下や、<br/>
求人申し込みのフロー下に設置していることが多かったです。</p>

<h2>まとめ</h2>

<p>今回は、競合サイトの研究についてのみの記事となってしまいましたが、<br/>
本来はこれを踏まえて、自分が売るものの分析も併せて必要になります。<br/>
自分の分析だけでは、曖昧になってしまう部分も、<br/>
競合他社を調査することで、明確なビジョンが見えてくるので、<br/>
狭い視野で考え込むことは、危険だと思いました。</p>

<p>今回は以上です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[先輩に頼り完成出来た初プロジェクト]]></title>
    <link href="https://sachool.jp/blog/entry/2017/02/22/new-first-project/"/>
    <updated>2017-02-22T15:10:26+09:00</updated>
    <id>https://sachool.jp/blog/entry/2017/02/22/new-first-project</id>
    <content type="html"><![CDATA[<p>初めまして、新人エンジニアのTKです。<br/>
入社して3ヶ月後に、新規プロジェクトに参加しました。<br/>
今回は、その時の事について記述していきたいと思います。</p>

<!-- more -->


<h2>既存サイトを作り直した</h2>

<p>参加した初プロジェクトは、既存動いているサイトに機能を追加し、お客様に提供する仕事でした。
Ruby on Rails４を使い作る為、まずrailsの勉強から始めました。</p>

<h3>作成した機能</h3>

<ul>
<li>会員登録処理を作った</li>
<li>ユーザー画面の修正</li>
<li>チャット機能に機能追加</li>
<li>パスワード忘れ機能の修正</li>
</ul>


<h3>会員登録処理を作った</h3>

<p>会員登録画面を作ろうと思い要件を聞いた結果、フォームにはform_forやform_tagがあり、既存のページはform_forで作られていたが、form_tagで作る必要があり、form_tagに変える作業でつまずきました。
また、deviseで会員登録を行っており要件には、複数テーブにデータを保存する必要があり保存作業でつまずき大変でした。</p>

<p>会員編集画面も作りました。
編集画面は会員登録とあまり変わらなかったのですが、画面をタブで切り分ける事が必要で大変でした。</p>

<p>会員登録画面を完成させるまでに遅れが発生し先輩にフォローして貰いながら、残業でキャッチアップしていたのですが間に合わず、先輩にログイン機能を担当して頂いた為間に合いました。</p>

<h3>ユーザー画面の修正</h3>

<p>既存のサイトにタイトルの変更、ボタンの追加、pdfの出力等を行いました。
実装は簡単に終わったので良かっです。</p>

<h3>チャット機能に機能追加</h3>

<p>既存で動いているチャット機能にボタンが押されたらタイトル作成無しでチャット出来る機能を追加しました。
既存の処理がありそれに追加するので、処理を理解するのに時間がかかりました。
遅れが発生しましたが残業で間に合わせました。</p>

<h3>パスワード忘れ機能の修正</h3>

<p>既存の処理は、userのemailで送信するのだが、別テーブルのemailで送信するのが、用件だったので、別テーブルのemailを取得し送信させるのに時間がかかった。
　</p>

<h2>動作確認</h2>

<p>全ての機能を完成後、テストケースを作成し動作確認とテストを行いました。</p>

<p>テストを行ったところ、バリデーションを追加されていなかった。
また、表示項目が間違っていたなど、修正するのに時間がかかったため大変でした。</p>

<h2>まとめ</h2>

<p>新規プロジェクトに参加し既存動いているサイトに機能追加を行いましたが、先輩に質問し過ぎていたので迷惑をかけてしまいました。
これからは、もっと自分で調べる癖をつけたいと考えています。
また、もっといいプログラムが書けるよう勉強して行きたいとも考えています。</p>

<p>次のプロジェクトも頑張って参加して行きたいと考えています</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[投稿サンプル]]></title>
    <link href="https://sachool.jp/blog/entry/2017/02/15/sample/"/>
    <updated>2017-02-15T15:03:22+09:00</updated>
    <id>https://sachool.jp/blog/entry/2017/02/15/sample</id>
    <content type="html"><![CDATA[<p>サンプル</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ランディングページって何？]]></title>
    <link href="https://sachool.jp/blog/entry/2017/02/10/lp-description/"/>
    <updated>2017-02-10T14:01:20+09:00</updated>
    <id>https://sachool.jp/blog/entry/2017/02/10/lp-description</id>
    <content type="html"><![CDATA[<p>初めまして。デザイナーのoguraです。<br/>
実務では、LPの制作やホームページの改修などを行っています。<br/>
ブログを書くのは初めてなので、<br/>
至らないところもあるかもしれませんが、よろしくお願いします。</p>

<p>私は今、デザインの引き出しを増やすために<br/>
業務の空き時間で、架空のLPを制作しています。<br/>
今日はLPについての簡単な説明をしようと思います。</p>

<!-- more -->


<h2>そもそもLPって何&hellip;?</h2>

<p>LPとは、Landing（ランディング）Page（ページ）の頭文字をとった言葉です。</p>

<h3>様々な意味があるランディングページ1</h3>

<p>ランディングページとは、<br/>
「Webサイトに訪問したユーザーが最初に訪れたページ」のことです。<br/>
ランディングページを直訳すると、landing（着陸）page（ページ）となりますね！<br/>
このSachool Engineering Blogを閲覧する際に、トップページから訪れた方はトップページが、直にSachool Engineering Blogから来た場合は、このページがランディングページとなります。<br/>
つまりサイトの入り口は全てランディングページとなるわけですね。</p>

<h3>様々な意味があるランディングページ2</h3>

<p>広義的には上記の意味ですが、<br/>
一般的にランディングページは「商品やサービスを売るための広告用の長いWebページ」と<br/>
いう意味で使用されます。略称でLPと呼ばれます。<br/>
また、リスティング広告などのWeb広告の遷移先になっていることが多いです。</p>

<h2>ランディングページの大きな特徴</h2>

<p>ランディングページは、広告施策に特化したサイトのため、<br/>
一般的なWebサイトと違う大きな特徴があります。</p>

<ol>
<li>レイアウトが縦長</li>
<li>特定のターゲットに特化したデザイン</li>
<li>リンクの数が少ない</li>
</ol>


<h3>1 レイアウトが縦長</h3>

<p>特定のサービスの広告目的のページのため、<br/>
必要なページは作成せず1Pのレイアウトになっているのが特徴です。<br/>
また1Pのため、売るために必要な情報を盛り込むと縦に長くなる傾向があります。<br/>
また情報を望んだ順番にすることができるため、<br/>
広告として使いやすい面があります。</p>

<h3>2 特定のターゲットに特化したデザイン</h3>

<p>Web広告の遷移先になっていることから、<br/>
サイトの訪問者のターゲットが絞りやすく、<br/>
特定の層にアピールできるデザインが作りやすいため、<br/>
ターゲットに合わせた訴求が可能です。<br/>
また広告的な目を引くデザインにしやすいのも特徴です。</p>

<h3>3 リンクの数が少ない</h3>

<p>訪問者が商品やサービスなどに「お問い合わせ」「購入」などの<br/>
目標としたアクションを起こした状態をコンバージョンといいます。<br/>
ランディングページはコンバージョンに特化したサイトとため、<br/>
コンバージョンに結びつくページ以外のリンクはほとんどありません。</p>

<h3>まとめ</h3>

<p>ランディングページは、一言でまとめれば「広告用の長い1PのWebサイト」と<br/>
くくることができますが、運用やデザイン次第で、<br/>
目に見えるくらいの利益アップにつながる凄いツールです。</p>

<p>私もこのブログを書くために不明な点を調べて、<br/>
アウトプットしたことで、LPの利点をより感じられるようになりました。<br/>
本当に今まで、LPについてあやふやな知識しかなかったんだなと実感しました。反省します。</p>

<p>今回は以上です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[AMP対応ページを作ってみた事]]></title>
    <link href="https://sachool.jp/blog/entry/2016/11/25/amppage/"/>
    <updated>2016-11-25T06:48:20+09:00</updated>
    <id>https://sachool.jp/blog/entry/2016/11/25/amppage</id>
    <content type="html"><![CDATA[<p>スマートフォン対応のAMPページを作ってみた
スマートフォンの普及に伴ってスマートフォンからWEBページを見る機会が増えてきました。
パソコンのように固定回線を使って安定した通信を行える環境ではないので,スマートフォンでは小容量且つ見やすいサイトが求められてきます。</p>

<!--more-->


<h3>AMPとは</h3>

<p>Google社が提案しているOSS AMP(Accelerated Mobile Pages) <a href="https://www.ampproject.org/ja/">AMPproject</a>
スマートフォン向けのHTMLタグを容易していて,小容量,高速表示を行えるようにするためのツールです。</p>

<p>昨年に公開されたばかりで,じわじわと発展,普及をしていくであろうと考えています。</p>

<h3>AMPを使うと制限がかかるHTMLタグ</h3>

<p>AMPを使う事に伴って通信量を減らすためにCSSのサイズ制限,Javascriptの制限<strong>HTMLタグ</strong>の制限が設けられています</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>img  
</span><span class='line'>select  
</span><span class='line'>input  
</span><span class='line'>from  
</span><span class='line'>iframe  
</span><span class='line'>frame  
</span><span class='line'>option  
</span><span class='line'>…  </span></code></pre></td></tr></table></div></figure>


<p>上記の他にも使えないタグがあります。
使えなくなったといっても一部はAMP用のカスタムHTMLタグが存在します。
たとえば</p>

<p>imgタグをAMPタグにした場合</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;amp-img &gt;...&lt;/amp-img&gt;</span></code></pre></td></tr></table></div></figure>


<p>iframeタグをAMPタグにした場合</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;amp-iframe &gt;...&lt;/amp-iframe&gt;</span></code></pre></td></tr></table></div></figure>


<p>上記のように変換することができます。AMPタグを使用するためにはAMP専用のjavascriptを読み込みが必要です。
<strong>amp-img</strong>を使いたいときは</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;script async src="https://cdn.ampproject.org/v0.js"&gt;&lt;/script&gt;
</span><span class='line'>
</span><span class='line'>&lt;amp-img
</span><span class='line'>src="/hoge/image.png"
</span><span class='line'>width=100px
</span><span class='line'>height=100px
</span><span class='line'>layout="responsive"
</span><span class='line'>&gt;&lt;/amp-img&gt;</span></code></pre></td></tr></table></div></figure>


<p>layoutの情報,width,heightの値が必須になります。<br/>
画像サイズを固定すること,事前にレンダリングを行いアクションがあったときにレンダリングをさせずに表示できるようそうです。</p>

<p><strong>amp-iframe</strong>を使いたいときは</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;script async custom-element="amp-iframe" src="https://cdn.ampproject.org/v0/amp-iframe-0.1.js"&gt;&lt;/script&gt;
</span><span class='line'>
</span><span class='line'>&lt;amp-iframe
</span><span class='line'>width=400px
</span><span class='line'>height=600px
</span><span class='line'>layout="responsive"
</span><span class='line'>sandbox="allow-scripts allow-same-origin allow-popups"
</span><span class='line'>src="http://exsample.com"
</span><span class='line'>&gt;&lt;/amp-iframe&gt;</span></code></pre></td></tr></table></div></figure>


<p>上記もまたwidth,heightの指定が必須となっています。<br/>
sandboxの設定も必要になります。</p>

<p>他にも<a href="https://ampbyexample.com">ドキュメント</a>に記述されているので用途によって参考にすることができます。</p>

<h3>AMPを使ってみて</h3>

<p>第一印象は,使えなくなるタグが多すぎて思っていたように扱いにくかったことです。
画像の高さ,幅の指定が必須になったり,HTMLタグの構造がゴテゴテしていると感じました。クライアントからアクションが合ったときに画面のレンダリングをするのではなく、値がすでに有るため事前にレンダリングをした状態にして通信をしているみたいです。
HTMLタグ制限のせいで心が折れかけました。
使えないために違うアプローチをしなければならない場面に遭遇したり,「たすけてGoogleせんせー」としても音楽のアンプばっかりヒットして泣きそうでした。英語圏サイトでも思ったほどヒットが多くなかったです。
まだまだ日本語ドキュメントが少ない状態です。昨年表に出てきたばかりの技術なので,発展途上の段階かと思います。これからも普及をしていけば、AMPを使う場面が増えるかもしれません。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[wordpressサイトリニューアルをした事]]></title>
    <link href="https://sachool.jp/blog/entry/2016/11/25/renewal-site/"/>
    <updated>2016-11-25T03:07:34+09:00</updated>
    <id>https://sachool.jp/blog/entry/2016/11/25/renewal-site</id>
    <content type="html"><![CDATA[<p>昨日,積雪があって冬だなぁと感じるようになりました。暖かい寄せ鍋が食べたいk_yoshidaです。</p>

<p>既存サイトをリニューアルを行いました。その事について記述していきたいと思います。</p>

<!--more-->


<h3>既存サイトをリニューアル</h3>

<p>今回は,既存で動いてるサイトをリニューアルする案件に携わりました。Google
目的として、既存サイトの使いづらさを無くして使いやすいようにする。また,より使いやすくするために機能追加が少しありました。<br/>
WordPressのDBデータを取り出して加工をするような機能を拡張,呼び出しを行っていきました。<br/>
まではいいのですが,<br/>
WordPressの関数を使うとhtmlタグが付随された状態で表示されたり,自動でリスト表示されてしまう。などがあったため,HTML構造がバラバラになってしまいました。</p>

<p>既存機能をそのまま使いたくてそのまま記述したら全く違う結果になって崩れていってしまいました。そのため正しくCSSがはまっていない事に&hellip;さらにAMP案件が</p>

<p>AMPとはGoogle社が新しく提案しているカスタムHTML記述です。スマートフォンが普及に伴ってスマートフォン向けのために作られたカスタムHTMLです。<br/>
詳しくは次の投稿に書きます。</p>

<h3>遅延していくスケジュール</h3>

<p>主に3点,が原因で遅延してしいました。</p>

<ol>
<li>既存のWordPressの機能をそのまま持ってきたため,HTML構造が崩れてしまった。</li>
<li>AMP対応にするために躓きが非常に多かった事</li>
<li>JavaScriptはまだ勉強し始めた段階で煮詰まってしまった事</li>
</ol>


<p>動作不良を起こしたとき,原因が全くわからなく先輩に聞くに聞けなく悩んでしまったのが時間を無駄にしてしまいました。
1日の目標を立て余裕を持っていたのですが詰まりに詰まってくると1日の目標が達成できなくなってしまいました。
先輩のフォローもあってか遅れながらもなんとかやり遂げました。</p>

<h3>まとめ</h3>

<p>Wordpressで詰まるというよりJavaScript,JQueryで詰まってしまっていたので,聞いたり,見たりしながら出来るようになりました。
余裕がなくなってしまうと急に視野が狭まる事が自分の中に有ることがわかりました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【新卒】同僚に頼りっぱなしだった初プロジェクト]]></title>
    <link href="https://sachool.jp/blog/entry/2016/10/13/2016-10-13-firstproject/"/>
    <updated>2016-10-13T12:24:45+09:00</updated>
    <id>https://sachool.jp/blog/entry/2016/10/13/2016-10-13-firstproject</id>
    <content type="html"><![CDATA[<h3>初プロジェクト</h3>

<p>入社して2ヶ月の時、今携わっているプロジェクトにjoinしました。
そのプロジェクトの開発も現在は収束に向かいつつあります。
今回は、初プロジェクトを通しての気づきを書きたいと思います。</p>

<!-- more -->


<h3>同僚に頼りっぱなしだった1～2ヶ月目</h3>

<p>最初の1～2ヶ月はとにかく周りに頼っていたなと思います。
環境構築でつまずき、開発では実装方法が全くわからず。。。
一番簡単な機能を任せてもらったにもかかわらず、他の人より進まず、
成果も全く上げることができませんでした。</p>

<p>分からないときは、人に聞く前に自分で考えるようにしていますが、
それでも分からないときが多々ありました。
いつもサポートしてくれた同僚のK氏には本当に感謝しています。（ありがとう！）</p>

<h3>チケットの消化に奔走する3ヶ月目</h3>

<p>一通りの開発が終了し、単体試験や機能試験を実施して発見したバグや気になるところはチケットを発行します。
チケットは、一言で言えば、TODOです。
新しく開発しなければならない機能、修正しなけければならないバグ、気になる部分。
システムをよりよいものにするために必要だと思ったこと、実施しなければならないことを1つ1つのタスクにまとめたものです。
とはいえ、1つ1つのチケットでも作業量は異なり、数日～数週間掛かるものもあれば、数分で終わるものもあります。</p>

<p>私は、比較的小さなチケットをたくさん任せていただきました。
この頃には、実装方法も分かってきましたし、仕様の理解も少しずつ深まってきて周りに頼ることは
少なくなってきました。少し自分の成長を感じた瞬間です。</p>

<h3>新機能の開発を行った4ヶ月目</h3>

<p>チケットが少なくなってきた頃、少し大きな仕事を任せていただきました。
追加開発（新機能）を1人で担当するというものです。
一部では、仕様を決めるところから任せてもらいました。
仕事の進め方は、上司に示してもらったので困ることはありませんでしたが、
それがなかったら厳しかったなと思います。
仕事の役割としては、今はコーディングがメインですが、今後上流工程も担っていくことを考えると
仕様書を理解するだけではなく、構成や書き方にも目配りをする必要があると思いました。</p>

<h3>怒涛の4ヶ月</h3>

<p>こうして振り返るとあっという間の4ヶ月だったなと思います。
今、現在も軽微なバグ修正や追加機能の開発を行っていますし、
保守対応などもあるのでプロジェクトはまだまだ続くと思いますが、
キリがいいので一旦振り返ってみました。</p>

<p>最後に今回のプロジェクトで学んだことをまとめてみます。</p>

<ul>
<li>マルチタスクは極力避ける(1つ1つを迅速に)</li>
<li>進捗率を意識する（残タスクに掛かる時間を予想し、進捗を考慮する）</li>
<li>仕様面で分からないことはすぐに質問する</li>
<li>実装面で分からないことは時間を決めて考える （時間内に答えが出なかった場合は相談する）</li>
<li>実装に関して方針が定められてないものは、自分なりに方針を定めて順に対応する（重いものから、見えないものを可視化する）</li>
</ul>


<p>仕事の進め方は、まだまだぺーぺーですが、技術面では非常に成長できたと感じています。
次の案件かもん！</p>

<p>今回は以上です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[テスト！]]></title>
    <link href="https://sachool.jp/blog/entry/2016/08/01/work-test/"/>
    <updated>2016-08-01T16:41:10+09:00</updated>
    <id>https://sachool.jp/blog/entry/2016/08/01/work-test</id>
    <content type="html"><![CDATA[<p>こんにちは！<br/>
東京オフィスのisseiです！</p>

<p>テスト業務を行いました！</p>

<!--more-->


<h2>前回より、切り込んだテストを実施。</h2>

<p>前回約2ヶ月前程に実施した時には、試験書をみて間違っているところをひたすら探して報告するような作業でした。<br/>
その作業の中でエンジニアの大変さを痛感した訳ですが、今回はより本来の開発現場をひしひしと感じるようなテスト業務になりました。</p>

<h2>ログを調べる</h2>

<p>前回と比べて何が違うかといったらやはり、ログを見ながら作業を行う所でした。<br/>
そもそもログとは何か。<br/>
<em>アプリケーション、OS、サービスが処理内容、警告などの履歴を逐一記録し、障害発生時や開発時（デバッグ）などに参照できるようにするため作成する。</em><br/>
Wikipediaには上記のようにありました。<br/>
障害を修正する為には、このログを分析して修正箇所を絞っていくのです。<br/>
前回報告で終わっていた作業でしたが、このログファイルを見てエラーが起こっていそうな箇所を報告するところまでを行いました。<br/>
ただ、このログファイルを見てもどこに何が書いてあるか分かりません。<br/>
英語と記号が書かれたファイルで、何か実行すると書き足されていく。。</p>

<p>そんな中試験を進めながら、エラーが発生したら先輩方に一緒に確認してもらいながらログファイルを眺めていると、<br/>
どこかのクラスの、どのメソッドを呼び出しているという情報が記載されていて、エラーが発生した場合にはその内容が記載されている事が分かりました。</p>

<p>バグ見つけるの簡単じゃん！ってなりそうですけど実際はそんな単純ではないようで。。<br/>
別の場所で生成した誤ったデータを、別のクラスのメソッドで使用するとエラーが発生する、みたいな。<br/>
時限爆弾的なバグを発見する作業は、根気と予測と幅広い知識が必要で、ここでエラーが発生してそうですと確認を取ってみると見当違いであることが多かったです。。<br/>
sql文や、クラスの構成まだまだ勉強不足を実感しました。</p>

<h2>セキュリティ</h2>

<p>サービスにおいてセキュリティは、最重要項目でしょう。<br/>
便利な技術がある一方で、悪意ある使用をする人もいるようで。。<br/>
そんな悪意ある攻撃からサービスを守る為に、様々な対策があります。<br/>
今回のテストで印象的だったのが、SQLインジェクションです。<br/>
SQLはデータベースのデータを、取り出したり変更したり操作する言語です。<br/>
SQLインジェクションは、セキュリティ上の不備を意図的に利用し、アプリケーションが意図しないSQL分を実行して不正にデータベースを操作する攻撃を指します。</p>

<p>これの何が怖いのかというと、ニュースでも取り上げられているような個人情報の流出が起こる可能性があるという事です。<br/>
例えばログイン機能、ユーザーからの入力を受け付け、入力されたパラメータを元に画面遷移を行います。<br/>
この、ユーザーから受け付けたパラメータをSQL文に埋め込む際、チェックを行う事で悪意のある攻撃から守る事ができます。</p>

<p>実際の例です。</p>

<blockquote><p>SELECT * FROM user WHERE id=&lsquo;$id&rsquo; AND pwd=&lsquo;$pwd&rsquo;</p></blockquote>

<p>ユーザー名とパスワードを入力してログインする処理の一部で、idとpwdの組み合わせがデータベースのものと一致すると認証するというSQL文があるとします。<br/>
これに、</p>

<ul>
<li>$id : sackle</li>
<li>$pwd  : &lsquo; OR 'A&rsquo;=&lsquo;A</li>
</ul>


<p>上記を入力すると、SQL文は以下のようになります。</p>

<blockquote><p>SELECT * FROM user WHERE id=&lsquo;sackle&rsquo; AND pwd=&lsquo;&rsquo; OR &lsquo;A&rsquo;=&lsquo;A&rsquo;</p></blockquote>

<p>これが実行できてしまうと、ORの後は常に真なので、パスワードが異なっていても認証されてしまうという現象が起こってしまいます。<br/>
これが悪意のある攻撃です。。</p>

<p>このような攻撃の対策としてエスケープ(文字列に変換)や関数の使用、プレースホルダの使用が必要になってきます。(まだ理解できていません。。)<br/>
試験では上記のような入力を念入りに行いましたが、LIKE句で特殊文字となっている「％」のみエスケープされていなかったり、様々なパターンがある事を知りました。<br/>
特にセキュリティに関しては、重要視されるだけあって確実に理解して開発を行わなければいけないと感じました。</p>

<h2>テストを通じて見えてくる優秀なエンジニア像</h2>

<p>テストは、バグをくまなく探し障害を未然に防ぐ為の大切な作業です。<br/>
テスト仕様書があり、様々なケースを想定して予想しない動きが無いかを確認していきます。</p>

<p>しかし、上記で書いたようなセキュリティに関して理解が出来ていれば、ここが怪しそうだと予測を立てながら漏れなく効率的に試験を行う事ができるでしょう。<br/>
また本来であれば発生したエラーに対して、ログや実際のコードを見ながらバグの指摘だけではなく修正案を提示出来るほうが優しいでしょう。<br/>
更に起こりそうなバグを、コードを見て未然に防げるのかもしれません。</p>

<p>厳しいテストと愛のある指摘。<br/>
素晴らしい優秀なエンジニアは、知識・技術だけではない人間性豊かなビジネスマンであると感じました。</p>

<p>前回とは違う、奥の深いエンジニアの仕事の難しさを感じたテスト業務でした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Bulletin_Board_with_Java]]></title>
    <link href="https://sachool.jp/blog/entry/2016/07/22/bulletin-board-with-java/"/>
    <updated>2016-07-22T11:15:35+09:00</updated>
    <id>https://sachool.jp/blog/entry/2016/07/22/bulletin-board-with-java</id>
    <content type="html"><![CDATA[<h1>javaを使って掲示板作成</h1>

<p>どうも。新人エンジニアのhondaです。</p>

<p>今回は、java servletを使って掲示板を作成する課題に取り組んだので投稿します。</p>

<p>＊以下の内容はサーバサイドjavaのプログラムがどう動いているかを、全体的な視点で見たものを記述しています。理解があやふやなところはできるだけ調べて書いていますが、間違っている記述もあるかもしれません。参考程度に読んでいただければ幸いです。
また間違いなど、よろしればご指摘ください。</p>

<!-- more -->


<h2>はじめてのservlet</h2>

<p>java servletというjavaの機能を使ってwebアプリを作りました。</p>

<p>javaのプログラムは1ヶ月ほど学んできましたが、webはいろいろと分からないことが多く苦労したのでその辺を書いていこうと思います。</p>

<p>servletとはjavaでwebサービスを作るための、javaで書かれたプログラムで、webに必要なhttp通信等の機能を実装したクラス（？）の集合（パッケージ？）であると理解しています。</p>

<p>なので普通のjavaのプログラムにimportして使います。</p>

<p>そしてインポートするべきservlet-apiはjdkには入って無いのでダウンロードする必要があります。</p>

<p>tomcatというservletを動かすserverをインストールすればその中にservlet-api.jarというファイルがあるのでここにクラスパスを通します（環境変数の設定）。これにクラスパスを通せばservlet をimportしたjavaをコンパイルできます。</p>

<p>importするとhttp requestとresponse を使ってクライアントと情報のやり取りをすることができるようになります。</p>

<p>こんな感じで、servletを使える環境をつくりました。</p>

<h2>tomcatのファイル配置</h2>

<p>その後、理解に苦しんだのがtomcatにファイルをどう配置すればいいのかという点です。</p>

<p>いろいろと調べまわった結果、以下のようにファイルを配置すればいいことが分かりました。</p>

<p>まずtomcat内のwebapps下にプロジェクトのディレクトリを配置します。
（webapps/bulletinBoard みたいな感じ）</p>

<p>続いて、bulletinBoardの中にWEB-INFというディレクトリを作ります。
（bulletinBoard/WEB-INF）</p>

<p>そして、このWEB-INFの中にservletプログラムを配置します。</p>

<p>最後に、WEB-INF下にweb.xmlというファイルを作ります。ここにはservletにアクセスするためのurl等が記録されています。</p>

<p>基本的にはこの構成でサーブレットを動かします。</p>

<p>servletを継承したjavaクラスファイルをWEB-INF下に置き、web.xmlに記述したurlでブラウザからアクセスします。</p>

<p>たとえば、web.xmlにlogin というURLとLoginServlet.javaというservletファイルの関連を記述しておけば、webからはlocalhost:8080/bulletinBoard/loginといったURLでservletファイルにアクセスできます。</p>

<p>WEB-INF下のファイルにはブラウザからは直接アクセスできないので、web.xmlに記載のurlにアクセスしてもらって、そのURLとweb.xmlを元にサーバーはservletを探し出して、クライアントにサービスを提供します。</p>

<h2>servletでMVCモデルを構築</h2>

<p>servletでwebアプリを作るときは、</p>

<ul>
<li><p>servlet →　コントローラー（クライアントからリクエストを受け付けて、必要な処理をモデルに指示して、情報をビューに返す）</p></li>
<li><p>java Beans （あるいは普通のjavaクラス？） →　モデル（コントローラーから指示を受けて情報を処理。DB通信もこのクラスで行う）</p></li>
<li><p>jsp →　ビュー（コントローラーから受け取った情報をhtmlとして表示）</p></li>
</ul>


<p>という役割分担でクラス設計をします。</p>

<p>jspとはhtmlにjavaのコードを埋め込むようにして使えるようにしたプログラムのことです。htmlにjavaコードが入っているので、servletからもらったDBの情報などをjavaからテキストとして出力し、ブラウザはそのテキストを読み込みます。ということなので、テキスト出力はHTMLの文法にのっとって書きます。
（実際はjspもservletを継承したクラスで、servletがout.println()とかやってテキスト（HTML）を出力するのを、うまいこと書きやすいように変換してるプログラム？みたいです。なので、jspを読み込む際は、jspをjavaプログラムに変換 → コンパイル → 実行 → HTMLのテキストが出力される → ブラウザはこれを読む という感じになっているのだと思います。）</p>

<p>その一方、java Beans　はモデルとしてビジネスロジックを担当します(とwikipediaには書いてあります)。java Beansとはプロパティとそれに対するgetter, setterを持った普通のjavaクラスです。このプロパティに、たとえばDBからとってきたデータをセットして、コントローラー → ビューに渡して表示をします。ということなので、java Beans自体は情報だけ保持して処理を持たないので、DB接続等の処理は普通のjavaクラスに持たせます。</p>

<p>そして、servletはクライアントからのリクエストを受け付けて、内容によって処理を分岐させてモデルに処理を指示して、処理した情報を受け取ります。その後、表示すべきjspを選択しクライアントに表示します。クライアントがjsp(HTMl)を参照して再びリクエストを送ってくるとサーブレットがこれに対応します。</p>

<p>（というわけなので、基本的にjspファイル（ビュー）もサーブレット経由で表示するので、ブラウザから直接は見えないWEB-INF下に配置します。いちおうWEB-INF外に置いてブラウザから直接アクセスしてもらうこともできます。</p>

<p>そして、気をつける点として、WEB-INF下にCSSやJSファイルを置くと、ブラウザから参照できないのでフロントに反映されません。これは、jspファイルにアクセスするとjavaプログラムの出力としてHTMLが表示され、ブラウザはこれを読み込んだ後にHTMLに記載のlinkをたどってcss,JSを読みに行こうとするからです。つまりservletの指示で読み込みに行っているわけではないので、WEB-INF下は参照できない、と理解しています。）</p>

<h2>掲示板の作成</h2>

<p>以上の感じでサーバサイドjavaを理解しつつ、掲示板を作成しました。</p>

<p>今回は</p>

<ul>
<li>apache-tomcat-8.0.36</li>
<li>mysql 15.1</li>
<li>IDEはeclipse</li>
</ul>


<p>で作成しました。</p>

<p>成果物は会員制の掲示板で以下の機能があります。</p>

<ul>
<li>会員制でユーザー名とパスワードで認証</li>
<li>カテゴリー→スレッド→コメントという階層状に情報を保存</li>
<li>画像のアップロードできる</li>
<li>会員別に投稿情報を管理し、自分の投稿のみを削除できる</li>
</ul>


<p>大雑把にはこんな感じです。</p>

<p>いちおうクラス図だけアップしておきます。</p>

<p><img src="https://sachool.jp/blog/images/0295_honda.jpg" alt="掲示板クラス図" /></p>

<p>掲示板作成後に知ったのですが、DB接続はそれぞれの処理（SELECT、UPDATE、INSERT、DELETEなど）ごとに分けるべきらしいです。また、各サーブレットごとにセッションクラス（？）を用意して、処理を記述する方法もあるらしいです。</p>

<h2>課題を終えて</h2>

<p>ひとつのwebアプリケーションを作ってみることで、全体像が理解できて大変勉強になりました。</p>

<p>webアプリひとつ作るだけで、HTML,CSS,Javascript,サーバサイド言語の4つのスキルを身につけなければならず、求められるものが多いなと感じました。</p>

<p>また、webの技術はブラックボックスが多いなと感じました。たとえば、httpリクエストを送るときにはどんなプログラムが動いているのかなどを考えなくても、getとpostで送信するんだと理解しておけばコードは書けます。</p>

<p>ただ、その裏側まで理解した上でプログラムを作っていくことが重要だと思いました。それが本質を理解してコードを書くということだと思います。</p>

<p>総じて、webの技術の奥の深さが分かった課題でした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[もうすぐ3ヶ月。。]]></title>
    <link href="https://sachool.jp/blog/entry/2016/06/15/kadai/"/>
    <updated>2016-06-15T20:58:12+09:00</updated>
    <id>https://sachool.jp/blog/entry/2016/06/15/kadai</id>
    <content type="html"><![CDATA[<p>こんにちは。東京オフィスのイッセイです。<br/>
ユーロが始まりましたが、僕の推し国は開催国のフランスです。</p>

<p>今回は、もう少しで入社して3ヶ月になるという事で現在の課題の振り返りと日々感じる事を書いていきたいと思います。</p>

<!--more-->


<h3>アルゴリズムを考えた！</h3>

<p>このブログでも書きましたが、入社して電卓アルゴリズムの作成から始まりました。
アルゴリズムができたら、それが正しく出来ているのか実際のコードで書いてみて検証をしていきました。ここで初めて、コードを書くようになったのですが(C++)ここで自分が作成したアルゴリズムが間違っている事に気付く訳ですね。
作成したアルゴリズムどおりに作成するとそれはそれは書けたもんじゃ有りませんでした。
コードを書いて初めて分かる事もありました。</p>

<p>アルゴリズム作成　→　検証　→　アルゴリズム修正　</p>

<p>こんな流れでの課題を、ソートと検索アルゴリズムにおいても行いました。</p>

<p>結果から逆算して、一つ一つ論理的に組み立てることや、どうしたらもっと効率的に動かせるか、という事を捻り出さないといけないのですが、これが全然出来てなかったですね。</p>

<p>ただ、実際にコードを書いてそれが動いた時、<br/>
<em>本当に動いたー！</em>と思って結構嬉しかったですね。</p>

<p>アルゴリズムを考える作業は、エンジニアとしての基礎になると思いますし、とても大切な事だと思います。今になって痛感している事でもあります。</p>

<h2>クラス図とシーケンス図の作成</h2>

<p>アルゴリズムを考える課題が終わり、オブジェクト指向の学習に入りました。
これは設計側の考え方ですね。</p>

<p>オブジェクト指向やMVCは、システムの仕組みや構成を理解するものですが、この学習をしてから、自動販売機のクラス図を作成しました。</p>

<p>システムを、オブジェクトの相互作用で構築しようというのがオブジェクト指向ですが、<br/>
このインスタンス(オブジェクト)を生み出すのがクラスです。</p>

<p>複雑に絡み合っているイメージのあるシステムですが、それを図にして分かり易くあらわそうとしたのがクラス図です。<br/>
自動販売機のクラス図という事で、これまた相当の苦戦をしました。というより現在進行形です。。</p>

<p>今回は、皆さんのように詳細を書くというよりもかなりの修正を行ったのでパニックになりながら感じた事を簡単に書いていきたいと思います。</p>

<p>まず、クラス図を作成する上で大切な事は、それぞれのオブジェクトの役割を明確にする事。<br/>
その為には自動販売機のことをよく理解していなければなりません。<br/>
これは、アルゴリズムでも同じでした。<br/>
自動販売機で考えると、</p>

<ul>
<li>入金する</li>
<li>ボタンを押す</li>
<li>商品を取り出す</li>
<li>お釣りを取り出す</li>
</ul>


<p>こんな感じですかね。</p>

<p>これを基に作成を始めるわけですけどそもそも使用者目線ですし、基本的にオブジェクト指向の理解が曖昧だった為、この視覚的に見えているものに引っ張られて、内部構造を良く考えられてませんでした。<br/>
イベントに対して、何がどんな役割を持って動作するのかを全く考慮していません。</p>

<p>そこから、修正に修正を重ねるほど、自ら複雑にしていました、<br/>
とりあえずの継承みたいになっているクラスや、自動販売機にありそうな物体や仕組みに名前をつけただけのクラス図になっていました。</p>

<p>その後、シーケンス図を書いて処理の流れ、オブジェクトの役割を明確に理解しようという目的だったのですが、何がなんだか分からなくなり一人混乱している時間が長かったです。</p>

<p>まあそれも当然です。<br/>
そもそもの基礎概念の理解が出来ていないので、どこが間違っているのかも分かっていなかったからです。<br/>
原点に立ち返り、基礎的なところの復習を行い、再度整理をして作成を行ったのですが、気付けばクラス図の作成を始めて1ヶ月以上経っていました。</p>

<p>役割を明確にして、どうオブジェクトを抽出していくのか。<br/>
そしてそのオブジェクトはどう周りとやり取りをするのか。</p>

<p>1ヶ月経ってようやくまともに考えるようになり、それまで多くの時間を無駄にしてしまってと思います。<br/>
何をするにしても、基礎的な事への理解が大切で疎かにしてはいけないと痛感しております。この期間を、その勉強期間だったと無理やりポジティブに考えようと思っています。</p>

<h2>まとめ</h2>

<p>入社してもうすぐ3ヶ月になります。正直進捗的には遅れています。
論理的に考える力や、学習の仕方が人と比べて明らかに欠陥していると感じました。<br/>
結論を急いでしまったり、時間の経過と共に本質的なところから少しずつずれてしまっていたり。気付かないうちに様々な要因に流され、目的を見失っている事もあったんだと思います。<br/>
課題の目的は、これから先エンジニアとして闘うための準備であるのですが、課題の提出が目標になってしまっていたのでは、、と感じています。</p>

<p>課題が出来ると、少なからず達成感を味わいますし、喜びもあります。<br/>
しかしその先にある、もっと大きい達成感を味わう為、喜びや誇りを感じれるようになる為に、もっともっと、考え抜いて脳みそを鍛えていかないといけないなと、感じています。</p>

<p>改めてですが、テスト業務を通じて再度凄い仕事だなーと実感しました。<br/>
未経験からエンジニアを目指す方、決して大変な事ばかりではないすばらしい職業です。<br/>
考えて考えて考える事。粘り強く考える事から逃げなければ結果はついてくるはずです。頑張りましょう！！<br/>
(自戒の意)　　</p>

<p>そんな感じで、今回は終わりたいと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[テスト]]></title>
    <link href="https://sachool.jp/blog/entry/2016/06/15/test/"/>
    <updated>2016-06-15T17:41:54+09:00</updated>
    <id>https://sachool.jp/blog/entry/2016/06/15/test</id>
    <content type="html"><![CDATA[<p>こんにちはnaです。初めての業務について書きます。</p>

<p>今回は開発の中でテストに参加しました。
流れとしては仕様書どおりにテストを行い、不備があった場合修正を依頼します。
これの繰り返しです。<!--more--></p>

<p>テストを行うということで今回の開発の資料を拝見しました。
様々な操作、流れ、パターンについて細かく丁寧に書かれた仕様書たち・・・
開発するにはこれだけの準備が必要なのかと思いました。</p>

<p>テストではひとつの動作に対していくつものパターンを行ったりしました。
実際にこれを使ういろんな立場の人、あらゆる角度からしっかり動作するにはあの膨大な仕様書たちをしっかり準備する必要があるのだとわかりました。</p>

<p>もうひとつ必要だと感じたのはいろんなことに興味を持つことです。
当たり前ですが開発ではクライアントがどのようなことをなさっていて、何を開発してほしいのか理解しなければなりません。
その際IT関連の知識のみならずあらゆることを知っておかなければと思いました。</p>

<p>今回はテストのみの参加でしたが開発の中身が垣間見えました。
今後もっと早い段階から開発に参加したときどのようなことが待ち受けているのか。
またその時書こうと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[電卓のアルゴリズム]]></title>
    <link href="https://sachool.jp/blog/entry/2016/06/15/algorithm/"/>
    <updated>2016-06-15T17:41:54+09:00</updated>
    <id>https://sachool.jp/blog/entry/2016/06/15/algorithm</id>
    <content type="html"><![CDATA[<p>こんにちは、naのです。
今回は私もやりました“電卓のアルゴリズム”。<!--more--></p>

<p>まずは「＋、－、＝、数字だけの電卓のアルゴリズム」。</p>

<p>つまりただの足し算と引き算です。なにが難しいのでしょうか・・・と思いますよね、
私もそうでした。</p>

<p>実際自分の思い通りに動かそうとするとこれがうまくいかない。
私がつまずいてしまった原因は自分を中心に考えていたことです。</p>

<p>確かに数字や演算子を入力するのは電卓を使う人です。
しかし実際計算するのは電卓。
自分ではこれで計算するでしょ・・と思ってもコンピュータはわかってくれなかったのです。
こうやって動いてほしいならどんな命令を与えるべきかをしっかり考えなければいけませんでした。</p>

<p>それから私は</p>

<p>・数字が入力されたら→配列arrayD[i]に格納</p>

<p>・演算子が入力されたら→配列arrayH[k]に格納</p>

<p>・数字が入力された時点で演算をする</p>

<p>としました。</p>

<p>これで＋－電卓のアルゴリズムはできました。
ですが、電卓はそれだけではありません。</p>

<p>つづいて「×、÷を含んだ電卓のアルゴリズム」です。</p>

<p>例えば「３＋４×２＝」の式では「４×２」を先に演算するように四則演算では＋－より×÷を優先して計算します。</p>

<p>複雑になりそうですね。しかし高度な数学の計算をするのではありません。</p>

<p>上記のとおり「４×２」を先に演算させるためには「３」と「＋」はどうするのか。
ならば一旦保存する場所を作るなり演算のタイミングを変えたりすればいいのではと考えました。</p>

<p>そして</p>

<p>・数字と演算子をarrayD[i]とarrayH[k]に分けるに加え演算は式が入力し終えたら行うとする。</p>

<p>・例で言う「３」のようにあとで演算させる数字を変数sumに保存
と設定し、あとは演算子によって演算の場合わけを指示。</p>

<p>電卓のアルゴリズムができました。</p>

<p>いよいよこのアルゴリズムが正しいのか実際プログラムをして検証します。</p>

<p>今回はJavaScript（以下js）及びJQueryを使いました。
Jsについて知識が全くなかったので調べては書いてを繰り返し、かつ今回は自分で作ったアルゴリズムが正しいと証明するためアルゴリズムどおりに電卓が実行するようコードを書きました。</p>

<p>今回電卓を作るのにすごく考えました。これからもっと大きな開発をする時は今回の比じゃないでしょう。
でもエンジニアにとってこの考えることがほんとに大事です。
いい物を作るにはどうしたらいいか、有り余る情報の中から正しいのはどれか、そしていつか自分が開発したものを使ってくれる人のことを考えられるエンジニア…になれるでしょうか。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[インベーダーゲームを作りました]]></title>
    <link href="https://sachool.jp/blog/entry/2016/06/15/invader-game/"/>
    <updated>2016-06-15T16:38:49+09:00</updated>
    <id>https://sachool.jp/blog/entry/2016/06/15/invader-game</id>
    <content type="html"><![CDATA[<p>どうも。新人エンジニアのhondaです。
入社して早くも2ヶ月半が過ぎ、システム開発の全体像が少しずつ見え始めた感じです。</p>

<p><strong>「Invaderゲームのiphoneアプリをつくろう」</strong>という研修課題に取り組んだので、今日はその成果を報告します。</p>

<!--more-->


<h2>Space Invaders</h2>

<p>そもそもInvaderゲームってどんなだっけ？</p>

<p>というところから調べました。
もちろんInvaderがどんなゲームかはなんとなく知っていましたが、細かいルールなど知らない部分も多かったので、調べたところ</p>

<blockquote><p>「画面の中央やや上方に縦に5段、横に11列の計55のインベーダーが現れる。インベーダーはまとまって横移動をしながら、端にたどり着くたびに一段下がって再び逆方向に進
行する。これを繰り返すことによって、だんだんと下に降りてくる。インベーダーが画面
最下部のプレイヤーの位置まで降りてきたら占領されたことになり、残機があってもゲー
ムオーバーとなるために、それまでにインベーダーを全滅させなければならない。」
<a href="https://ja.wikipedia.org/wiki/%E3%82%B9%E3%83%9A%E3%83%BC%E3%82%B9%E3%82%A4%E3%83%B3%E3%83%99%E3%83%BC%E3%83%80%E3%83%BC#.E3.82.B2.E3.83.BC.E3.83.A0.E7.94.BB.E9.9D.A2.E3.81.A8.E3.82.B2.E3.83.BC.E3.83.A0.E5.86.85.E5.AE.B9">『wikipedia』</a></p></blockquote>

<p>とのこと。これを参考に作ることにしました。</p>

<h2>まず設計</h2>

<p>まずはインベーダーゲームのクラス図を作成することから始めました。</p>

<p>結果的に下記のようなものが出来上がりました。(画像小さくてすみません。)</p>

<p><img src="https://sachool.jp/blog/images/InvadersClassFigure.png" alt="invaderClassFigure-1" /></p>

<p>登場するオブジェクトは、invader(画面上方に５５匹いる宇宙人)、tank（プレイヤー）、lazer(インベーダーの攻撃)、missile（プレイヤーの攻撃）、wall（レーザー攻撃を防
ぐ壁）、field（各キャラクターの座標を記録）、それとコントローラー（viewを管理、モデルに指示を送る）と各種Viewです。</p>

<p>当時はjavaでプログラミングの学習をしていたのですが、viewを作成する方法などをいま
いち理解していなかったところもあり、なんだかこのままクラスを実装しても動かないの
では？という感じのクラス図になってしまってます。</p>

<p>当初考えていたのは、各キャラクターのクラスが存在し、その座標を(二次元配列などで)管理するFieldクラスがあり、そのFieldクラスが各インスタンスの座標を比較して、衝突判定などを行うというものでした。</p>

<p>各キャラクターの座標の移動や、ミサイルとインベーダーの衝突でイン
ベーダーが消えるといったことをこまめに確認していかないといけないのですが、そのた
めに考えたのが、Fieldのインスタンスを、たとえば0.3秒ごとにnewして、Fieldのコンス
トラクタ内で各キャラクターのインスタンスの座標を受け取り、衝突や移動を確認すると
いう解決策でした。（ややこしいですね。つまりFieldの更新＝Fieldインスタンスの生成、みたいに考えてました。）</p>

<p>結果的にはこんな面倒なことをする必要はなかったのですが、xcodeとObjective-cを学習
するまえは、こんな感じで考えてました。</p>

<h2>Objective-cを学ぶ、そして実装</h2>

<p>iphoneアプリを作るということで、入社後一ヶ月ほど勉強していたJavaから離れて、まず
はObjective-cを勉強し始めました。</p>

<p>書籍にて、objective-cの基礎とxcodeの使い方を流し読みし、コードを一部写経しつつ一
通りの内容を学んでから実装に入りました。</p>

<p>流し読みしただけだったので実装では、コードの書き方が分からない、という事態が多発
しました。その度に参考書の該当箇所を参照しながら実装しました。</p>

<p>たとえば、画面にviewを追加するにはまずUIImageView クラスのインスタンスを生成し、そ
こに画像をプロパティとしてもたせて、最後に親viewにaddするという手順を踏みますが、このコードを書くにも、その度に本を参照しながら書いてました。</p>

<p>また、配列の使い方にも苦労しました。objective-cでは配列に基本データ型を代入できないので、配列に入っている座標（数値）を取り出す際にintValueメソッドを使う必要が
あります。これを知らずに配列から数値を変数に取り出して使っていると、いつの間にか
変数に13740といったすごく大きな数値が入っていたりして驚きました。これも、ちゃんと参考書の第三章の配列の使い方の箇所に載っていました。</p>

<p>ほかにもインベーダーがおかしな動きをしたり、尋常じゃない数のレーザー攻撃が降って
きたりと、数え切れないほどのバグが発生したのですが、その都度googleや参考書を頼り
ながらひとつずつ解決していきました。</p>

<p>そしてついにインベーダーゲームが完成しました。</p>

<p>コードをここにアップするのもあまりに冗長なので、完成したゲームのクラス図をアップ
します（下記のものです）。</p>

<p><img src="https://sachool.jp/blog/images/InvadersClassFigure2.png" alt="InvaderClassFigure2" /></p>

<p>当初の設計とはかなり違ったものになりました。</p>

<p>まず、Fieldクラスはなくしました。よく考えてみれば、各クラスの座標はわざわざどこかにまとめて管理しなくても、その都度、各インスタンスの座標を比較して衝突を判定す
ればいいということに気がつきました。</p>

<p>それから当初Fieldクラスのコンストラクタ（objective-cのイニシャライザ）に記述しよ
うと考えていた、衝突判定やViewの移動といった処理は、他のクラスとしておのおの切り
出しました。基本的にViewControlerがこれらのクラスのメソッドを（timerをつかって）
一定時間ごとに呼びだすことにして、処理を行わせました。</p>

<p>model側とview側の両方にinvaderやtankといったクラスが存在しますが、これはmodelとviewを分けて、viewはmodelを参照するだけにするという形にしたかったので分けました。
model側の座標はx = 0 ~ 22, y = 0 ~ 11の範囲の整数値で持っています。viewはその座標値に定数を掛けて、画面上の座標を決定しています。</p>

<h2>感想</h2>

<p>インベーダーアプリを作ってみて、かなりいい勉強になりました。</p>

<p>何より、<strong>アプリをひとつ作ったという達成感</strong>があります。</p>

<p>これまで書いてきたプログラムと違って、viewが存在するということもあり、自分がコー
ドで書いているものがそのたびに形になっていくのがうれしかったです。ものをつくって
いるという感覚があって、没頭して作業することができました。</p>

<p>それから、実装していく中で感じたのが、ものをつくるのは問題解決の繰り返しなんだと
いうことです。</p>

<p>今回、実装していく中でバグが発生することが多々あったのですが、その
たびに原因を追究して、代替策を考え、実装してみて狙い通り動作するかを試すというこ
とを繰り返してました。</p>

<p>ときには問題にはまってしまって解決するのに数時間かかるよう
なこともありました。ただ、何度もそれを繰り返しているうちに、問題が発生してから原
因を探るスピードがあがっていくのを感じました。それもまた、大きな収穫かと思います
。</p>

<p>総じて、ひとつのものを作り上げることの苦労とやりがいを感じた課題でした。
新しい言語(objective-c)の習得に始まり、ツール(xcode)の使い方を学び、実装では問題
を解決しつづけるというなかなか密度の濃い内容だったと思います。</p>

<p>この課題を通して得た、地道にこつこつと問題を解決していく考え方をしっかり今後に生
かしていきたいです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[テスト業務を行いました]]></title>
    <link href="https://sachool.jp/blog/entry/2016/06/02/test/"/>
    <updated>2016-06-02T14:34:27+09:00</updated>
    <id>https://sachool.jp/blog/entry/2016/06/02/test</id>
    <content type="html"><![CDATA[<p>こんにちは、東京オフィスのイッセイです。</p>

<p>入社して約2ヶ月となりましたが、初の業務として、テスト業務を行いました。  <br/>
その時の事を書いていこうと思います。</p>

<!--more-->


<p>そもそもテストって何をするものなのか、具体的にどのような作業なのか、ミーティングを通して
とても重要な業務である事を知りました。</p>

<p>システム障害が発生した場合、どこに責任があるのか。
それは<em>実装した人ではなくテストを行った人の責任</em>という話がありました。</p>

<p>テスト業務が障害を起こさないようにする最終チェックである事を聞き、身が引き締まる思いをした所から始まった、怒涛の一週間でした。</p>

<h2>準備が大切</h2>

<p>実際にテスト業務は何を行うのかというと、ざっくりですが、システムが事前に設計した意図通りに動くかをチェックする作業です。<br/>
その為には、サービスの事やシステムの動きを理解している必要があります。</p>

<p>実際の開発だと、実装する人が自らテストを行うと聞きましたが、今回は何も分からない中からのスタートだったので、テストチームで認識を合わせるミーティングを入念に行いました。<br/>
様々な条件をもとに動きが変わってくるので、その動きを追う事と、試験書に書かれている項目が何を意図した試験であるかをしっかり理解して行わなければなりません。<br/>
その為に、事前に曖昧なところを無くしておく事が必要でした。</p>

<h2>地道な作業の連続</h2>

<p>実際のテスト業務は、画面を順に操作しながら意図しない動きがあったら指摘し、修正して貰います。<br/>
例えばバリデーションという、いわゆる入力のチェックを行うものがあるのですが、</p>

<ul>
<li><p>最大文字数+1、最大文字数、最大文字数-1という3種類での入力を行い、不適切な入力でエラーメッセージが表示されるか</p></li>
<li><p>入力する文字の種類によって、エラーメッセージが適切に表示されるか</p></li>
<li><p>フォームが複数ある場合、1つだけ不適切な入力をした際でも適切にエラーメッセージが表示されるか</p></li>
</ul>


<p>など、様々なテストがあります。</p>

<p>具体に実際あったバグの例をあげるとこんな感じ。</p>

<blockquote><p>一回目の入力で不適切な入力を行うと適切なエラーメッセージが表示されるが、
2回目以降でエラーメッセージが表示されず処理が進んでしまう。</p></blockquote>

<p>この謎の挙動に対して、様々な言葉が飛び交い、考えられる要因を1つずつ潰しながら修正を行っていました。<br/>
僕にはまだ分かりませんでしたが修正も一筋縄ではいかない作業だと実感すると同時に、一回適切に動いたからと油断できないなーとテスト業務の大変さを垣間見た瞬間でもありました。</p>

<h2>テスト業務を通して</h2>

<p>基本的には様々なテストを実施し、修正を依頼、そして修正されたものを再テストするという流れの繰り返しでした。
でもそれだけではなく、意図通りの動きだけではなく意図しない動きをわざと行ってバグが発生しないかをチェックするテストも行いました。改めて、世に出すためにはあらゆるテストを行なわなければならないんだなーと、また予期せぬバグに対応する為にも幅広い知識が必要だと感じました。</p>

<p><em>しかし、ただ大変だっただけではなく勿論学ぶ事もありました。</em></p>

<ul>
<li><p>使用したツールも初めて触るものが殆どだったので、そうしたツールの使い方を知る事ができた事。</p></li>
<li><p>フォームの入力や、チェックボックスの動きでDBの値が変化し、またDBの値で表示を変更しているといった事を、実際に画面やDBを操作することが出来た事。  (これは今行っている課題がどう展開されていくのかをイメージをする良いきっかけになりました。)</p></li>
<li><p>そして何より書籍やWebサイトを通じて学習してきたWebの仕組みも、実際に動かし、その反応を見ながら進める事ができ、まさに百聞は一見にしかずとはこの事だなーと、理解が深まった気がします。</p></li>
</ul>


<p>あと「password」と入力する回数が多く、テストを通じて2倍ぐらい速くなったのも収穫ですかね。<br/>
Wのとこが苦手だったので、良かったです。。　　</p>

<p>以上テスト業務を通して感じた事を書いてみました。<br/>
開発に関われるよう、目の前の課題を頑張ろうと思います。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[テスター作業で得たもの]]></title>
    <link href="https://sachool.jp/blog/entry/2016/05/30/tester-work/"/>
    <updated>2016-05-30T18:47:57+09:00</updated>
    <id>https://sachool.jp/blog/entry/2016/05/30/tester-work</id>
    <content type="html"><![CDATA[<p>東京オフィスの(k_yoshida)です。今回はテスター業務に携わった事について書きます。
主に２つのことを重要だと感じました。</p>

<ol>
<li>使う人の視線になってチェックをすること</li>
<li>システムが問題なく動ことはどうゆうことか</li>
</ol>


<p>  <!--more--></p>

<h2>使う人の視線になってチェックをすること</h2>

<p>誰がどのように使うのか考慮してテストを行う事は,視野を広げ無いといけないと思いました。</p>

<p>視野を変えることで見えなかった物が見えてきたり理解しやすくなるからです。理解をすれば自ずと動作がおかしいことがわかるようになれます。</p>

<p>テストを行う際に動作がこうなってほしい,なってほしくないというのがわかるようになりました。
実装をする際に誰が使うのかを考えて作れるようにならないといけないと思いました。</p>

<h2>システムが問題なく動くことはどうゆうことか</h2>

<p>システムが問題無く動作することは,お客さんにとって安心して使ってもらえる事だと思います.<br/>
もし,動作が問題が合って使えない事はお客さんにとって不利益ないし損害になってしまう可能性が発生してしまう事になる,そのような事を
避けるためにシステムの動作チェック,バグ修正を行わなければならないです。そのためにテスター作業を行い全ての条件分岐を網羅し,全ての動作を一度動作チェックを行います。
そのため<strong>テスター作業は製品の品質にとても関わってくる重要なセクション</strong>だと感じました。</p>

<h4>感想</h4>

<p>デグレーションが発生した時は初めからテストをやり直すことになったので悲しかったです。
テスター同士で再試験となったチケットの争奪なる場面があったので、誰がどのチケットを行うか明確にしておくべきだったのではないかと思いました。
また、試験中に仕様変更が行われ試験者に情報が行き渡らず、NGが増えて先ほどまでチェックがOKだっら箇所がNGになったりと混乱した場面がありました
実装者と試験者の間で仕様の変更,試験項目の変更等の共有がうまく取れていなかった気がします。連携が取れていれば慌てなくて済んだのではなかと終わってから思いました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[初業務・システムテストやりました]]></title>
    <link href="https://sachool.jp/blog/entry/2016/05/30/test/"/>
    <updated>2016-05-30T18:19:22+09:00</updated>
    <id>https://sachool.jp/blog/entry/2016/05/30/test</id>
    <content type="html"><![CDATA[<h2>テストの嵐</h2>

<p>どうも。新卒エンジニアのhondaです。<br/>
今回は、新卒４人で業務の手伝いをしたので投稿します。</p>

<p>先々週から1週間ほど新卒チームで、業務の手伝いという形で、システムの機能テストと総合テストを行いました。テストだけとはいえ、初の業務ということで気合入れてやってきました。</p>

<p>以下、テスト業務を通じて思ったことを書いていきます。</p>

<!--more-->


<h2>そもそもテストって何？</h2>

<p>そもそもテスト業務ってどういうものなのか。</p>

<p>システムのテストとは、システムが意図したとおりに動くかどうかをチェックする作業です。テストには、単体テスト、結合テスト、機能テスト、総合テストといった種類があるのですが、今回僕らは単体テストを除いた３つのテストをおこないました。</p>

<p>それぞれのテストがどういったものかという説明には立ち入りません。ググってください。（スミマセン）</p>

<p>僕らが行ったテストは、実際にユーザーが操作するのと同じ画面を操作して、設計どおりに動くか？バグはないか？ということをチェックしていくものです。</p>

<h2>テストって、、、大変ですね。。。</h2>

<p>ここから個人的な感想ですが、今回テスト業務をやってみて思ったのは、</p>

<p><em>テストって地味だな～～～</em></p>

<p>ということです。</p>

<p>画面をひたすら手順どおりに操作して、設計にある動作を満たしているかをチェックしていく。バグを見つけたら実装担当者に修正してもらい、また再試験。これを一日中行う。結構地道な作業ですよね。</p>

<p>正直途中から嫌になってきました。同じ操作を何度も繰り返し、画面のキャプチャを取って貼り付けてを繰り返し、スマホでもPCでもそれを繰り返して大変でした。</p>

<p>大変だったと連呼していますが、その一方で収穫もあリました。テストをしていると結構バグが見つかったのですが、バグが見つかるたびに、意図した機能を達成するのって大変なんだなと実感しました。</p>

<p>設計どおりに実装するっていうことが、ただ教科書どおりにコードをかけばできるわけでは無いんだろうなと想像できました。</p>

<p>たとえば、今回のテストでいくつかバリデーションがうまく機能しないということが何度かありました。バリデーションとは入力された内容が要求どおりになっているか（氏名のふりがなは平仮名でなければならない、など）をチェックすることをいいます。このバリデーションがうまく機能しないことがあったのですが、普通に考えれば、実装で入力内容を正規表現でチェックしたり、なにかしらのメッソッド（この辺あいまいです）を使えばチェックできるものと思うのですが、それだけで解決しないこともあるようです。キャッシュがなんだとか言っていたのが途中聞こえてきましたが、結局なんとか解決してました。</p>

<p>その辺の問題解決力は場数を踏むことと、システム開発に対する深い理解が必要なんだろうなと思いました。</p>

<h2>その他よかったこと</h2>

<p>今回のテスト業務を通して、システム開発の全体像がやや見えた感じがしました。<br/>
テスト業務にかかわるだけであっても、ユーザーに対する理解、運用フロー、DB設計
等々、理解しなければならないことが多く、システム開発の複雑さを体感しました。<br/>
また、データベースの操作など各種ツールの使い方も学べて、研修内容と業務の結びつきをより実感できました。</p>

<p>そんな感じのテスト業務でしたが、次は実装もしっかりできるようになってから、もっと深いところまで関わっていきたいです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[【課題】ビデオカメラのクラス図を考える]]></title>
    <link href="https://sachool.jp/blog/entry/2016/05/13/class-diagram/"/>
    <updated>2016-05-13T09:25:57+09:00</updated>
    <id>https://sachool.jp/blog/entry/2016/05/13/class-diagram</id>
    <content type="html"><![CDATA[<p>仙台ファクトリーのkish(@31_kish)です。</p>

<p>ビデオカメラのクラス図と聞いたとき、機能が多く、膨大なクラスの数になるだろうと思った。<br/>
IDEなどでクラスを作った場合、処理の流れがテストできるが<br/>
図だけで作ると処理の流れが見えないので、メソッドやプロパティを考えるのが難しい。</p>

<p>クラス図を元にプログラミングを行うと勘違いをしていたが<br/>
クラス図とはクラス間の関係を表現するものであり、細かいメソッドの処理などは考慮しなくても良いらしい。</p>

<p>クラス図を作るまでの過程を以下にまとめた。</p>

<!--more-->


<h2>機能を洗い出す</h2>

<p>実際にビデオカメラを触りながら大まかに機能を洗い出した。<br/>
あれ、意外と少ない。</p>

<ul>
<li>各種ボタンの動き</li>
<li>液晶画面に表示される内容</li>
<li>動画・静止画の撮影</li>
<li>動画・静止画のプレビュー</li>
</ul>


<h2>機能をMVCで考える</h2>

<p>次に行ったことは、MVCで表現すること。</p>

<h4>コントローラー</h4>

<ul>
<li>電源の管理（入・切）</li>
<li>ACアダプタの状態を監視</li>
<li>録画状態のビューを呼ぶ</li>
<li>ビューの入力を監視</li>
<li>録画ボタンの状態を監視（開始・停止）</li>
<li>ズームボタンの状態を監視（拡大・縮小）</li>
<li>撮影モードの状態を監視（動画・静止画）</li>
<li>画面の状態を監視、状態によるビューを呼ぶ（録画・再生・メニュー）</li>
<li>端子の状態を監視（接続済み・未接続）</li>
<li>モデルに状態を通知</li>
</ul>


<h4>ビュー</h4>

<ul>
<li>時計を表示</li>
<li>録画時間を表示</li>
<li>バッテリーの表示</li>
<li>モードを表示</li>
<li>メニューを表示</li>
<li>ズームボタンの表示</li>
<li>傾きを表示</li>
</ul>


<h4>モデル</h4>

<ul>
<li>コントローラーから通知を受け取る</li>
<li>傾きを補正</li>
<li>電源を切る</li>
<li>電源を入れる</li>
<li>ACアダプタの状態を受け取り、バッテリ、外部電源を変更</li>
<li>録画を開始</li>
<li>録画を停止</li>
<li>録画した動画を保存する</li>
<li>ズームボタンの状態を受け取り、レンズの状態を変更（拡大・縮小）</li>
<li>撮影モードの状態を受け取り、撮影モードの変更(動画・静止画）</li>
<li>端子の状態を受け取り、機器への接続を開始・停止</li>
</ul>


<h2>クラス図をつくった</h2>

<p><a href="https://sachool.jp/blog/images/2016-05-10-video-camera.jpg"><img src="https://sachool.jp/blog/images/2016-05-10-video-camera.jpg" alt="クラス図" /></a></p>

<p>はじめはViewがModelのインスタンスを持っていて複雑になっていたが<br/>
ご指摘をいただき、シンプルにまとめることができた。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[ネスカフェバリスタのクラス図を作ってみた]]></title>
    <link href="https://sachool.jp/blog/entry/2016/05/11/nescafe-class/"/>
    <updated>2016-05-11T16:05:55+09:00</updated>
    <id>https://sachool.jp/blog/entry/2016/05/11/nescafe-class</id>
    <content type="html"><![CDATA[<p>どうも！仙台ファクトリーのkouです。<br/>
今回は、「ネスカフェバリスタ」のクラス図と格闘した話を綴っていきたいと思います。</p>

<!-- more -->


<h2>クラス図とは何か</h2>

<p>クラス図とは、一言で言うと<code>オブジェクト同士の関係性</code>を示したものです。<br/>
どういう風に動くかなどは一切考慮せずに、構造だけを示します。</p>

<h3>記述方法</h3>

<p>次のように記載します。<br/>
-&mdash;&mdash;&mdash;&ndash;<br/>
| クラス名 | <br/>
-&mdash;&mdash;&mdash;&ndash;<br/>
|    属性    | <br/>
-&mdash;&mdash;<br/>
|    操作    | <br/>
-&mdash;&mdash;</p>

<p>見づらくてすみません。<br/>
これを1つのクラスとして、各々のクラスを特殊な線形（関連とか集約）で繋いでいきます。<br/>
詳しくは、<a href="http://www.itsenka.com/contents/development/uml/class.html">IT戦科さんのクラス図（Class Diagram）</a>が参考になります。</p>

<h2>方針</h2>

<p>さて、ざっくりクラス図の書き方を押さえた上で作成に入ったわけですが、私は次のような方針を立ててクラス図の作成を進めました。</p>

<ul>
<li>①取り扱い説明書を読んで、どういう表示・機能があるか把握</li>
<li>②それらからオブジェクトを抽出</li>
<li>③そのオブジェクトの属性、操作を考える</li>
<li>④それらのオブジェクト間の関係性を記述する</li>
</ul>


<h2>①表示・機能の抽出</h2>

<p>まずは表面的な部分を抽出してみました。</p>

<h3>パネル表示</h3>

<ul>
<li>通常表示</li>
<li>コーヒー抽出表示</li>
<li>コーヒー抽出量調整中表示</li>
<li>カップ温め表示</li>
<li>電源切表示及びオートオフ表示</li>
<li>メンテナンス表示</li>
<li>リンス表示</li>
<li>給水お知らせ表示</li>
<li>抽出準備表示</li>
<li>各種エラー表示</li>
</ul>


<p>点灯パネルは6つしかないのに、パネルの組み合わせや色の変化でこれだけの表示種類がありました。</p>

<h3>機能</h3>

<ul>
<li>コーヒー作成機能</li>
<li>すすぎ機能</li>
<li>カップあたため機能  ＊ブラック系のみ可能</li>
<li>湯量調整機能  ＊ブラック系のみ可能</li>
</ul>


<p>ボタンの同時押しなどですすぎ機能やカップのあたためができます。
普段は、電源ボタンを押して飲みたいコーヒーのボタンを押すだけで出来上がるわけですが、詳しく見るとこのように多くの機能があります。 カップあたため機能を使っている人（というか知ってる人）はいるんでしょうか。。。</p>

<p>ちなみに私はコーヒー飲まないです。</p>

<h2>②オブジェクトの抽出</h2>

<h4><code>ここがもっとも苦戦したところです。 </code></h4>

<p>どれをどうオブジェクトにすればいいのか非常に悩みました。  さっぱり分からないんです。<br/>
最初は、ネスカフェ本体をネスカフェクラスとし、そして実際にコーヒーを作成する内部の部分をコーヒークラスとし、2つのクラスに詰め込もうとしました。<br/>
ネスカフェクラスがViewController担当、コーヒークラスがModel担当です。</p>

<p><img src="https://sachool.jp/blog/images/class1.png" alt="alt octopress" /></p>

<p>ちなみにどうして、MVCモデルで考えたかというと</p>

<ul>
<li>M :　内部</li>
<li>V :　タッチパネル</li>
<li>C :　ボタン</li>
</ul>


<p>という風に見立てることができたからです。</p>

<p>上図でチェックしてもらったところ、更に細分化できるという指摘を受けたので、修正したのが下記になります。</p>

<p><img src="https://sachool.jp/blog/images/class2.png" alt="alt octopress" /></p>

<h2>③オブジェクトの属性、操作の考察</h2>

<p>実際には②と同時並行に進めていましたが、</p>

<h4><code>ここも苦戦しました。</code></h4>

<p>構造を書く前に属性や操作をあちこちに書いていたため、どのクラスが何を管理するのかがぐちゃぐちゃになってしまったからです。（手順通りにやってれば。。。）<br/>
だからノートに役割をメモ書きしています。</p>

<p>まずはこちらを作成<br/>
<img src="https://sachool.jp/blog/images/class3.png" alt="alt octopress" /></p>

<p>しかし、<br/>
・NescafeBlackModelが入力を持っているのはおかしい<br/>
・Controllerが曖昧<br/>
ということで考え直して、修正したのがこちら。</p>

<p><img src="https://sachool.jp/blog/images/class4.png" alt="alt octopress" /></p>

<p>Controllerにボタンを押した際のイベント処理を全てまとめました。</p>

<h2>④オブジェクトの関係性の考察</h2>

<ul>
<li>各々のコーヒークラスがNescafeMakeModelクラスを継承【汎化】</li>
<li>MVC同士は、1:1の関連【関連】</li>
</ul>


<p><img src="https://sachool.jp/blog/images/class5.png" alt="alt octopress" /></p>

<h2>課題の所感</h2>

<p>オブジェクトの関係性を表すのがクラス図なのに、属性や操作のことを考えすぎて思いの外に時間が取られてしまいました。<br/>
MVCモデルで考えられることに気づいたときに、一瞬視界が開けた気はしたのですが、なかなか細分化が進まずに苦戦しました。また、多重度も怪しいですし、ビューなんか。。。</p>

<p>まだフィードバックを受けてないので、受け次第修正点を追記していこうと思います。</p>

<p>今回は以上です。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[新卒エンジニアがVagrantを使ってみた]]></title>
    <link href="https://sachool.jp/blog/entry/2016/05/11/vagrant-env/"/>
    <updated>2016-05-11T15:13:54+09:00</updated>
    <id>https://sachool.jp/blog/entry/2016/05/11/vagrant-env</id>
    <content type="html"><![CDATA[<p>どうも！仙台ファクトリー新卒のkouです。<br/>
今回は、Vagrantを使ってみたのでまとめてみたいと思います。<br/>
Vagrantを使って仮想OSの立ち上げまでできるようになることを目指します。</p>

<!-- more -->


<h2>１． Vagrantとは</h2>

<h3>Vagrantの概要</h3>

<p>Vagrantは、仮想環境を簡単に構築できるツールです。<br/>
仮想化ソフトであるVirtual Boxと併用して使います。<br/>
これまで面倒だった環境構築もコマンドを数行打つだけで完了させることができます。</p>

<p>Vagrantを利用することで次のことが実現できます。</p>

<ul>
<li>ローカル環境と本番環境を揃える</li>
<li>チームで開発する際の環境を揃える（＊構成管理ツールが必要）</li>
</ul>


<p>他にもいろいろできることはありますが、Vagrantを使うことでの最大の恩恵は
<code>大幅な時間の節約</code><br/>
これに尽きるのではないかと思います。  Vagrantの使い方を覚えることで、環境構築に費やす非生産的な時間から解放されて時間を有効に使えるようになると思います。</p>

<h3>Vagrantで押さえておきたい用語</h3>

<ul>
<li><p>Boxファイル<br/>
→Vagrant用にカスタマイズされたOSのイメージファイル。<br/>
　ネット上で配布されているものもある。（配布先は後述）自作も可能。<br/>
<code>＊BoxファイルがないとVagrantは使えないので注意</code></p></li>
<li><p>Vagrantfile<br/>
→仮想マシンの設定が書かれているファイル。<br/>
　ネットワーク設定やマシンスペック設定などが書かれている。<br/>
<code>＊Vagrant初期化時に生成される</code>
　</p></li>
</ul>


<h2>２．事前準備</h2>

<ul>
<li><a href="https://www.virtualbox.org/">VirtualBox公式サイト</a>より、OSに合ったVirtualBoxをダウンロードしインストール</li>
<li><a href="https://www.vagrantup.com/l">Vagrant公式サイト</a>より、OSに合ったVagrantをダウンロードしインストール</li>
<li><a href="http://">Vagrantbox.es</a>（＊1）より、必要なboxファイルをダウンロードorリンクの取得</li>
</ul>


<h4>Vagrantがインストールされたか確認</h4>

<p>Vagrantをインストールしたら、コマンドラインで</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant -v</span></code></pre></td></tr></table></div></figure>


<p>を入力し、vagrantが正しくインストールされているか確認しましょう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Vagrant 1.8.1</span></code></pre></td></tr></table></div></figure>


<p>というようにバージョンが表示されれば正常にインストールされています。</p>

<p>＊1 Vagrantbox.esは有志が作ったサイト。ここに公開されているBOXファイルの安全性は保障されてないので使用は自己責任で。</p>

<h2>３．Vagrantの設定</h2>

<p>ここからは、コマンドラインで操作を行います。</p>

<h4>１．Boxの追加</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant box add [Box名] [BoxのURL]
</span><span class='line'>
</span><span class='line'>例：boxファイルをサーバーから取得する場合
</span><span class='line'>$ vagrant box add centos http://github.com/~~~/centos.box
</span><span class='line'>
</span><span class='line'>例：boxファイルをフォルダから指定する場合
</span><span class='line'>$ vagrant box add centos C:/Users/[ユーザー名]/centos.box</span></code></pre></td></tr></table></div></figure>


<h4>２．Boxの追加の確認</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant box list</span></code></pre></td></tr></table></div></figure>


<p>と入力し、</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>[Box名]</span></code></pre></td></tr></table></div></figure>


<p>と表示されればVagrantへのBOXの追加は完了です。</p>

<h4>３．作業用フォルダの作成</h4>

<p>仮想環境用の作業フォルダを作成します。
今回は（ユーザー名）ディレクトリ直下にcentosというフォルダを作成します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ユーザーフォルダ直下に移動
</span><span class='line'>$ cd /c/users/[ユーザー名]
</span><span class='line'>
</span><span class='line'>centosフォルダを作成
</span><span class='line'>$ mkdir centos
</span><span class='line'>
</span><span class='line'>作成したフォルダに移動
</span><span class='line'>$ cd centos</span></code></pre></td></tr></table></div></figure>


<p>＊フォルダの作成は、デスクトップ上で行っても構いません。</p>

<p><code>vagrantを立ち上げる際は作成したフォルダに移動してから以降のコマンドを実行するようにします</code></p>

<h4>４．vagrantの初期化</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant init [Box名]
</span><span class='line'>例
</span><span class='line'>$ vagrant init centos</span></code></pre></td></tr></table></div></figure>


<p>これで、centosフォルダ上に1.で追加したboxファイルを起動するように設定されたvagrantfileが作成されます。</p>

<h4>５．vagrantの立ち上げ</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant up</span></code></pre></td></tr></table></div></figure>


<p>これでvagrantが起動し、仮想マシンが立ち上がります。</p>

<h4>６．仮想マシンへログイン</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant ssh</span></code></pre></td></tr></table></div></figure>


<p>これで仮想マシンを弄れるようになります。
＊windowsのコマンドプロンプトではssh接続ができないので、MinGWなどをインストールすることをお勧めします。</p>

<h4>７．vagrantの終了</h4>

<p>仮想マシンを弄り終わったら次のコマンドで停止してあげましょう。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant halt</span></code></pre></td></tr></table></div></figure>


<h4>８．vagrantの削除</h4>

<p>仮想マシンが不要になったら次のコマンドで削除できます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ vagrant destroy</span></code></pre></td></tr></table></div></figure>


<h2>４．まとめ</h2>

<p>今回は、簡単なローカル開発環境の構築を行ってみました。
まだまだ使いこなせてませんが、少しずつ使い慣れていきたいと思います。</p>

<p>今後は、Chefも触ってみて環境構築も自動化することを目指したいと思います。
自動化できるところは自動化して生産性UP!</p>

<p>今回は以上です。</p>
]]></content>
  </entry>
  
</feed>
